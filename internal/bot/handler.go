package bot

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
	"time"

	"YoutubeDownloader/internal/downloader"
	"YoutubeDownloader/internal/payment"
	"YoutubeDownloader/internal/storage"
	"YoutubeDownloader/internal/utils"

	"crypto/md5"

	tele "gopkg.in/telebot.v4"
)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func (b *Bot) handleMessage(c tele.Context) error {
	msg := c.Message()
	log.Printf("[EVENT] handleMessage: user_id=%d, text=%q", msg.Sender.ID, msg.Text)
	if msg.Text == "/start" {
		return c.Send("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å —Ä–∞–∑–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –∑–∞ Telegram Stars. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ!")
	}

	// –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–≤–æ–π—Å–æ–≤
	if msg.Text == "/test_invoice" && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		return b.sendTestInvoice(c)
	}

	// –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ PreCheckoutQuery
	if msg.Text == "/test_precheckout" && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		return c.Send("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –µ–≥–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ PreCheckoutQuery")
	}

	// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
	if msg.Text == "/bot_info" && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		return b.sendBotInfo(c)
	}

	// –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ –±–µ–∑ PreCheckoutQuery
	if msg.Text == "/test_direct" && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		return b.sendDirectInvoice(c)
	}

	// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API
	if msg.Text == "/api_info" && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		return b.sendAPIInfo(c)
	}

	// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º
	if msg.Text == "/cache_stats" && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		return b.sendCacheStats(c)
	}
	if strings.HasPrefix(msg.Text, "/cache_clean ") && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		parts := strings.Fields(msg.Text)
		if len(parts) < 2 {
			return c.Send("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ—Å–ª–µ /cache_clean")
		}
		daysStr := strings.TrimSpace(parts[1])
		days, err := strconv.Atoi(daysStr)
		if err != nil {
			return c.Send("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
		}
		return b.cleanOldCache(c, days)
	}
	if msg.Text == "/cache_clear" && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		return b.clearAllCache(c)
	}
	if msg.Text == "/active_downloads" && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		return b.sendActiveDownloads(c)
	}

	// --- –ë–ª–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
	if msg.Text == "/admin" && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		return b.sendAdminTransactionsMenu(c)
	}
	if strings.HasPrefix(msg.Text, "/refund ") && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		parts := strings.Fields(msg.Text)
		if len(parts) < 2 {
			return c.Send("–£–∫–∞–∂–∏—Ç–µ charge_id –ø–æ—Å–ª–µ /refund")
		}
		chargeID := strings.TrimSpace(parts[1])
		var userID int64 = 0
		if len(parts) >= 3 {
			// –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å user_id
			parsed, err := strconv.ParseInt(parts[2], 10, 64)
			if err != nil {
				return c.Send("user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
			}
			userID = parsed
		}
		return b.handleAdminRefundWithUserID(c, chargeID, userID)
	}
	// --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ---

	// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ª—é–±–æ–π —Å—Å—ã–ª–∫–∏
	urlRegex := regexp.MustCompile(`https?://\S+`)
	url := urlRegex.FindString(msg.Text)
	if url == "" {
		return c.Send("–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
	}

	if b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		go b.sendVideo(c, url, "", 0)
		return nil
	}
	if b.channelUsername != "" {
		isSub, err := b.CheckUserSubscriptionRaw(b.channelUsername, msg.Sender.ID)
		if err == nil && isSub {
			go b.sendVideo(c, url, "", 0)
			return nil
		}
	}
	return b.sendUniversalPayKeyboard(c, url)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
func (b *Bot) handleCallback(c tele.Context) error {
	cb := c.Callback()
	log.Printf("[EVENT] handleCallback: user_id=%d, data=%q", cb.Sender.ID, cb.Data)
	data := cb.Data
	if data == "pay_subscribe" {
		return b.sendSubscribeInvoice(c, "month")
	}
	if data == "pay_subscribe_year" {
		return b.sendSubscribeInvoice(c, "year")
	}
	if data == "pay_subscribe_forever" {
		return b.sendSubscribeInvoice(c, "forever")
	}
	if strings.HasPrefix(data, "pay_video|") {
		idStr := strings.TrimPrefix(data, "pay_video|")
		id, err := strconv.ParseInt(idStr, 10, 64)
		if err != nil {
			return c.Send("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
		}
		trx, err := payment.GetTransactionByID(b.db, id)
		if err != nil {
			return c.Send("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.")
		}
		return b.sendVideoInvoiceByDB(c, trx)
	}
	if strings.HasPrefix(data, "pay_tiktok|") {
		url := strings.TrimPrefix(data, "pay_tiktok|")
		return b.sendTikTokInvoice(c, url)
	}
	// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
	if strings.HasPrefix(data, "admin_refund|") && b.adminID != "" && b.adminID == toStr(c.Sender().ID) {
		chargeID := strings.TrimPrefix(data, "admin_refund|")
		return b.handleAdminRefund(c, chargeID)
	}
	// --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ ---
	return nil
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π
func (b *Bot) handlePayment(c tele.Context) error {
	log.Printf("[DEBUG] –í—ã–∑–≤–∞–Ω handlePayment")

	// –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
	var paymentInfo *tele.Payment

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ c.Payment()
	paymentInfo = c.Payment()
	if paymentInfo == nil {
		// –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Message
		update := c.Update()
		if update.Message != nil && update.Message.Payment != nil {
			paymentInfo = update.Message.Payment
			log.Printf("[DEBUG] –ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω –≤ Message")
		}
	}

	log.Printf("[EVENT] handlePayment: user_id=%d, paymentInfo=%+v", c.Sender().ID, paymentInfo)

	if paymentInfo == nil {
		log.Printf("[DEBUG] paymentInfo == nil, —Å–æ–±—ã—Ç–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
		return c.Send("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
	}

	userID := c.Sender().ID
	payload := paymentInfo.Payload
	amount := paymentInfo.Total
	chargeID := paymentInfo.ProviderChargeID

	log.Printf("[PAYMENT] –ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞: user_id=%d, payload=%s, amount=%d, charge_id=%s", userID, payload, amount, chargeID)

	// –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	trxs2, err2 := payment.GetAllTransactionsFromDB(b.db)
	if err2 == nil {
		log.Printf("[DEBUG] –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %+v", trxs2)
	} else {
		log.Printf("[DEBUG] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: %v", err2)
	}

	var id int64
	var url string
	if strings.HasPrefix(payload, "video|") {
		idStr := strings.TrimPrefix(payload, "video|")
		var err error
		id, err = strconv.ParseInt(idStr, 10, 64)
		if err != nil {
			log.Printf("[PAYMENT] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ id: %v", err)
			return c.Send("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
		}
		log.Printf("[PAYMENT] –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: id=%d, charge_id=%s", id, chargeID)
		err = payment.UpdateTransactionAfterPayment(b.db, id, chargeID, "success")
		if err != nil {
			log.Printf("[DB] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		}
		trx, err := payment.GetTransactionByID(b.db, id)
		if err != nil {
			log.Printf("[PAYMENT] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: %v", err)
			// –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
			trxs3, err3 := payment.GetAllTransactionsFromDB(b.db)
			if err3 == nil {
				log.Printf("[DEBUG] –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞: %+v", trxs3)
			}
			return c.Send("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")
		}
		url = trx.URL
		log.Printf("[PAYMENT] –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: user_id=%d, trx_id=%d, url=%s", userID, id, url)
	}
	if strings.HasPrefix(payload, "tiktok|") {
		url = strings.TrimPrefix(payload, "tiktok|")
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ë–î
	var err error
	trx := &payment.Transaction{
		TelegramPaymentChargeID: chargeID,
		TelegramUserID:          userID,
		Amount:                  amount,
		InvoicePayload:          payload,
		Status:                  "success",
		Type:                    "stars",
		Reason:                  "",
		URL:                     url,
	}
	_, err = payment.InsertTransaction(b.db, trx)
	if err != nil {
		log.Printf("[DB] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
	}

	if strings.HasPrefix(payload, "video|") {
		go b.sendVideo(c, url, chargeID, amount)
		return c.Send("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å.")
	}
	if strings.HasPrefix(payload, "tiktok|") {
		go b.sendTikTokVideo(c, url, chargeID, amount)
		return c.Send("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°–∫–∞—á–∏–≤–∞–Ω–∏–µ TikTok –Ω–∞—á–∞–ª–æ—Å—å.")
	}
	if strings.HasPrefix(payload, "subscribe|") {
		period := strings.TrimPrefix(payload, "subscribe|")
		// TODO: –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
		return c.Send("–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: " + period)
	}

	if strings.HasPrefix(payload, "test|") {
		log.Printf("[PAYMENT] –ü–æ–ª—É—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂: %s", payload)
		return c.Send("–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
	}

	if strings.HasPrefix(payload, "test_direct|") {
		log.Printf("[PAYMENT] –ü–æ–ª—É—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –±–µ–∑ PreCheckoutQuery: %s", payload)
		return c.Send("–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –±–µ–∑ PreCheckoutQuery –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
	}

	log.Printf("[PAYMENT] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø payload: %s", payload)
	return c.Send("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø–ª–∞—Ç—ã
func (b *Bot) sendUniversalPayKeyboard(c tele.Context, url string) error {
	// –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending' –∏ –ø–æ–ª—É—á–∞–µ–º id
	id, err := payment.CreatePendingTransaction(b.db, c.Sender().ID, 1, url)
	if err != nil {
		log.Printf("[DB] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}
	// –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
	trxs1, err1 := payment.GetAllTransactionsFromDB(b.db)
	if err1 == nil {
		log.Printf("[DEBUG] –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è pending: %+v", trxs1)
	} else {
		log.Printf("[DEBUG] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: %v", err1)
	}
	btns := [][]tele.InlineButton{
		{{Text: "–°–∫–∞—á–∞—Ç—å –∑–∞ 1 –∑–≤–µ–∑–¥—É", Data: fmt.Sprintf("pay_video|%d", id)}},
		{{Text: "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü –∑–∞ 30 –∑–≤—ë–∑–¥", Data: "pay_subscribe"}},
		{{Text: "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥ –∑–∞ 200 –∑–≤—ë–∑–¥", Data: "pay_subscribe_year"}},
		{{Text: "–ù–∞–≤—Å–µ–≥–¥–∞ –∑–∞ 1000 –∑–≤—ë–∑–¥", Data: "pay_subscribe_forever"}},
	}
	if b.channelUsername != "" {
		btns = append(btns, []tele.InlineButton{{Text: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", URL: "https://t.me/" + strings.TrimPrefix(b.channelUsername, "@")}})
	}
	msgText := "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
	if b.channelUsername != "" {
		msgText = fmt.Sprintf("–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ %s –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n%s", b.channelUsername, msgText)
	}
	markup := &tele.ReplyMarkup{InlineKeyboard: btns}
	return c.Send(msgText, markup)
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ –ë–î
func (b *Bot) sendVideoInvoiceByDB(c tele.Context, trx *payment.Transaction) error {
	log.Printf("[INVOICE] –°–æ–∑–¥–∞—ë–º –∏–Ω–≤–æ–π—Å –¥–ª—è user_id=%d, trx_id=%d, url=%s", trx.TelegramUserID, trx.ID, trx.URL)

	invoice := &tele.Invoice{
		Title:       "–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ",
		Description: "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∑–∞ 1 –∑–≤–µ–∑–¥—É",
		Payload:     fmt.Sprintf("video|%d", trx.ID),
		Currency:    "XTR",
		Prices:      []tele.Price{{Label: "–í–∏–¥–µ–æ", Amount: 1}},
	}
	log.Printf("[INVOICE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å: %+v", invoice)
	log.Printf("[INVOICE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %+v", c.Sender())

	// –î–ª—è Telegram Stars –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ provider token
	_, err := b.api.Send(c.Sender(), invoice)
	if err != nil {
		log.Printf("[INVOICE] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞: %v", err)
	} else {
		log.Printf("[INVOICE] –ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
	}
	return err
}

func (b *Bot) sendTikTokInvoice(c tele.Context, url string) error {
	invoice := &tele.Invoice{
		Title:       "–°–∫–∞—á–∞—Ç—å TikTok –≤–∏–¥–µ–æ",
		Description: "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ TikTok –≤–∏–¥–µ–æ –∑–∞ 1 –∑–≤–µ–∑–¥—É",
		Payload:     "tiktok|" + url,
		Currency:    "XTR",
		Prices:      []tele.Price{{Label: "TikTok", Amount: 1}},
	}
	log.Printf("[INVOICE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º TikTok –∏–Ω–≤–æ–π—Å: %+v", invoice)

	// –î–ª—è Telegram Stars –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ provider token
	_, err := b.api.Send(c.Sender(), invoice)
	if err != nil {
		log.Printf("[INVOICE] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ TikTok –∏–Ω–≤–æ–π—Å–∞: %v", err)
	} else {
		log.Printf("[INVOICE] TikTok –∏–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
	}
	return err
}

func (b *Bot) sendSubscribeInvoice(c tele.Context, period string) error {
	var price int
	var label, desc string
	switch period {
	case "month":
		price = 30
		label = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü"
		desc = "–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∑–∞–≥—Ä—É–∑–∫–∞–º –Ω–∞ 1 –º–µ—Å—è—Ü"
	case "year":
		price = 200
		label = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥"
		desc = "–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∑–∞–≥—Ä—É–∑–∫–∞–º –Ω–∞ 1 –≥–æ–¥"
	case "forever":
		price = 1000
		label = "–ù–∞–≤—Å–µ–≥–¥–∞"
		desc = "–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∑–∞–≥—Ä—É–∑–∫–∞–º"
	default:
		return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏")
	}
	invoice := &tele.Invoice{
		Title:       label,
		Description: desc,
		Payload:     "subscribe|" + period,
		Currency:    "XTR",
		Prices:      []tele.Price{{Label: label, Amount: price}},
	}
	log.Printf("[INVOICE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –ø–æ–¥–ø–∏—Å–∫–∏: %+v", invoice)

	// –î–ª—è Telegram Stars –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ provider token
	_, err := b.api.Send(c.Sender(), invoice)
	if err != nil {
		log.Printf("[INVOICE] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
	} else {
		log.Printf("[INVOICE] –ò–Ω–≤–æ–π—Å –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
	}
	return err
}

// –§—É–Ω–∫—Ü–∏—è —Å –ø–æ–≤—Ç–æ—Ä–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
func (b *Bot) sendVideoWithRetry(c tele.Context, video *tele.Video, url string, maxRetries int) error {
	var lastErr error
	for i := 0; i < maxRetries; i++ {
		err := c.Send(video)
		if err == nil {
			return nil
		}
		if strings.Contains(err.Error(), "context deadline exceeded") || strings.Contains(err.Error(), "Client.Timeout exceeded") {
			if i < maxRetries-1 {
				time.Sleep(2 * time.Second)
				continue
			}
		}
		lastErr = err
		break
	}
	return lastErr
}

func (b *Bot) sendVideo(c tele.Context, url string, chargeID string, amount int) {
	userID := c.Sender().ID
	requestID := fmt.Sprintf("req_%d_%s", userID, utils.RandomString(6))
	log.Printf("[VIDEO] [%s] –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: user_id=%d, url=%s, charge_id=%s, amount=%d", requestID, userID, url, chargeID, amount)

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
	cache, err := storage.GetVideoFromCache(b.db, url)
	if err != nil {
		log.Printf("[VIDEO] [%s] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞: %v", requestID, err)
	} else if cache != nil {
		log.Printf("[VIDEO] [%s] –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: file_id=%s", requestID, cache.TelegramFileID)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∏–∑ –∫—ç—à–∞
		video := &tele.Video{File: tele.File{FileID: cache.TelegramFileID}, Caption: "–í–∞—à–µ –≤–∏–¥–µ–æ! (–∏–∑ –∫—ç—à–∞)"}
		err = b.sendVideoWithRetry(c, video, url, 10)
		if err != nil {
			log.Printf("[VIDEO] [%s] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –∫—ç—à–∞: %v", requestID, err)
			// –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ –∫—ç—à–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –∫—ç—à–∞ –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
			storage.DeleteVideoFromCache(b.db, url)
			log.Printf("[VIDEO] [%s] –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∏–∑ –∫—ç—à–∞, —Å–∫–∞—á–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ", requestID)
		} else {
			log.Printf("[VIDEO] [%s] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞", requestID)
			return
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ URL
	if b.isDownloadActive(url) {
		log.Printf("[VIDEO] [%s] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è URL: %s, –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è", requestID, url)
		c.Send("–≠—Ç–æ –≤–∏–¥–µ–æ —É–∂–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –û–∂–∏–¥–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

		// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 10 –º–∏–Ω—É—Ç)
		downloadInfo, err := b.waitForDownload(url, 10*time.Minute)
		if err != nil {
			log.Printf("[VIDEO] [%s] –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: %v", requestID, err)
			b.sendError(c, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[TIMEOUT] "+url)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏
		if downloadInfo.Error != nil {
			log.Printf("[VIDEO] [%s] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π: %v", requestID, downloadInfo.Error)
			b.sendError(c, "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", downloadInfo.Error, "[DOWNLOAD_ERROR] "+url)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
		cache, err = storage.GetVideoFromCache(b.db, url)
		if err != nil {
			log.Printf("[VIDEO] [%s] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: %v", requestID, err)
		} else if cache != nil {
			log.Printf("[VIDEO] [%s] –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: file_id=%s", requestID, cache.TelegramFileID)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∏–∑ –∫—ç—à–∞
			video := &tele.Video{File: tele.File{FileID: cache.TelegramFileID}, Caption: "–í–∞—à–µ –≤–∏–¥–µ–æ! (–∏–∑ –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è)"}
			err = b.sendVideoWithRetry(c, video, url, 10)
			if err != nil {
				log.Printf("[VIDEO] [%s] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: %v", requestID, err)
				b.sendError(c, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[SEND_CACHE_ERROR] "+url)
			} else {
				log.Printf("[VIDEO] [%s] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è", requestID)
			}
			return
		} else {
			log.Printf("[VIDEO] [%s] –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è, –Ω–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ", requestID)
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –º—å—é—Ç–µ–∫—Å –¥–ª—è —ç—Ç–æ–≥–æ URL
	urlMutex := b.getURLMutex(url)
	urlMutex.Lock()
	defer func() {
		urlMutex.Unlock()
		// –û—á–∏—â–∞–µ–º –º—å—é—Ç–µ–∫—Å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
		go func() {
			time.Sleep(30 * time.Second)
			b.cleanupURLMutex(url)
		}()
	}()

	log.Printf("[VIDEO] [%s] –ü–æ–ª—É—á–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è URL: %s", requestID, url)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
	_ = b.startDownload(url, requestID, userID)
	defer func() {
		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
		b.finishDownload(url, nil)
	}()

	// –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ tmp —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := os.MkdirAll("./tmp", 0755); err != nil {
		log.Printf("[VIDEO] [%s] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ tmp: %v", requestID, err)
		b.sendError(c, "–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.", err, "[TMP_DIR] "+url)
		if chargeID != "" && amount > 0 {
			log.Printf("[VIDEO] [%s] –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤: charge_id=%s, user_id=%d, amount=%d", requestID, chargeID, userID, amount)
			payment.RefundStarPayment(userID, chargeID, amount, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏")
		}
		return
	}

	c.Send("–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
	select {
	case b.downloadLimiter <- struct{}{}:
		log.Printf("[VIDEO] [%s] –ü–æ–ª—É—á–µ–Ω —Å–ª–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", requestID)
		defer func() {
			<-b.downloadLimiter
			log.Printf("[VIDEO] [%s] –û—Å–≤–æ–±–æ–∂–¥–µ–Ω —Å–ª–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", requestID)
		}()

		// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å URL —Ö–µ—à–µ–º –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–∏
		urlHash := fmt.Sprintf("%x", md5.Sum([]byte(url)))[:8]
		filename, err := downloader.DownloadYouTubeVideoWithUserIDAndURL(url, userID, requestID, urlHash)
		if err != nil {
			log.Printf("[VIDEO] [%s] –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: %v", requestID, err)
			b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[DL] "+url)
			if chargeID != "" && amount > 0 {
				log.Printf("[VIDEO] [%s] –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤: charge_id=%s, user_id=%d, amount=%d", requestID, chargeID, userID, amount)
				payment.RefundStarPayment(userID, chargeID, amount, "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ")
			}
			// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
			b.finishDownload(url, err)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ URL
		expectedPrefix := fmt.Sprintf("ytvideo_user%d_%s_%s", userID, requestID, urlHash)
		if !strings.Contains(filepath.Base(filename), expectedPrefix) {
			log.Printf("[VIDEO] [%s] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: —Ñ–∞–π–ª %s –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d –∏–ª–∏ URL %s", requestID, filename, userID, url)
			b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", fmt.Errorf("—Ñ–∞–π–ª –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ URL"), "[FILE_OWNERSHIP] "+url)
			if chargeID != "" && amount > 0 {
				log.Printf("[VIDEO] [%s] –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤: charge_id=%s, user_id=%d, amount=%d", requestID, chargeID, userID, amount)
				payment.RefundStarPayment(userID, chargeID, amount, "–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞")
			}
			// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
			b.finishDownload(url, fmt.Errorf("—Ñ–∞–π–ª –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ URL"))
			return
		}

		video := &tele.Video{File: tele.FromDisk(filename), Caption: "–í–∞—à–µ –≤–∏–¥–µ–æ!"}
		log.Printf("[VIDEO] [%s] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª: %s", requestID, filename)
		err = b.sendVideoWithRetry(c, video, url, 10)
		if err != nil {
			log.Printf("[VIDEO] [%s] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", requestID, err)
			if info, statErr := os.Stat(filename); statErr == nil {
				sizeMB := float64(info.Size()) / 1024.0 / 1024.0
				b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[SEND_VIDEO] "+url, fmt.Sprintf("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: %.2f –ú–ë", sizeMB))
			} else {
				b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[SEND_VIDEO] "+url)
			}
			if chargeID != "" && amount > 0 {
				log.Printf("[VIDEO] [%s] –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤: charge_id=%s, user_id=%d, amount=%d", requestID, chargeID, userID, amount)
				payment.RefundStarPayment(userID, chargeID, amount, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ")
			}
			// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
			b.finishDownload(url, err)
			return
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ –∫—ç—à
		if video.File.FileID != "" {
			if err := storage.SaveVideoToCache(b.db, url, video.File.FileID); err != nil {
				log.Printf("[VIDEO] [%s] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: %v", requestID, err)
			} else {
				log.Printf("[VIDEO] [%s] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: file_id=%s", requestID, video.File.FileID)
			}
		}

		os.Remove(filename)
		log.Printf("[VIDEO] [%s] –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è URL: %s", requestID, url)
	default:
		c.Send("–°–µ–π—á–∞—Å –º–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")
	}
}

func (b *Bot) sendTikTokVideo(c tele.Context, url string, chargeID string, amount int) {
	userID := c.Sender().ID
	requestID := fmt.Sprintf("tiktok_%d_%s", userID, utils.RandomString(6))
	log.Printf("[TIKTOK] [%s] –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: user_id=%d, url=%s, charge_id=%s, amount=%d", requestID, userID, url, chargeID, amount)

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
	cache, err := storage.GetVideoFromCache(b.db, url)
	if err != nil {
		log.Printf("[TIKTOK] [%s] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞: %v", requestID, err)
	} else if cache != nil {
		log.Printf("[TIKTOK] [%s] –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: file_id=%s", requestID, cache.TelegramFileID)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∏–∑ –∫—ç—à–∞
		video := &tele.Video{File: tele.File{FileID: cache.TelegramFileID}, Caption: "–í–∞—à–µ TikTok –≤–∏–¥–µ–æ! (–∏–∑ –∫—ç—à–∞)"}
		err = b.sendVideoWithRetry(c, video, url, 10)
		if err != nil {
			log.Printf("[TIKTOK] [%s] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –∫—ç—à–∞: %v", requestID, err)
			// –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ –∫—ç—à–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –∫—ç—à–∞ –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
			storage.DeleteVideoFromCache(b.db, url)
			log.Printf("[TIKTOK] [%s] –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∏–∑ –∫—ç—à–∞, —Å–∫–∞—á–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ", requestID)
		} else {
			log.Printf("[TIKTOK] [%s] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞", requestID)
			return
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ URL
	if b.isDownloadActive(url) {
		log.Printf("[TIKTOK] [%s] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è URL: %s, –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è", requestID, url)
		c.Send("–≠—Ç–æ TikTok –≤–∏–¥–µ–æ —É–∂–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –û–∂–∏–¥–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

		// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 10 –º–∏–Ω—É—Ç)
		downloadInfo, err := b.waitForDownload(url, 10*time.Minute)
		if err != nil {
			log.Printf("[TIKTOK] [%s] –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: %v", requestID, err)
			b.sendError(c, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[TIMEOUT_TIKTOK] "+url)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏
		if downloadInfo.Error != nil {
			log.Printf("[TIKTOK] [%s] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π: %v", requestID, downloadInfo.Error)
			b.sendError(c, "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", downloadInfo.Error, "[DOWNLOAD_ERROR_TIKTOK] "+url)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
		cache, err = storage.GetVideoFromCache(b.db, url)
		if err != nil {
			log.Printf("[TIKTOK] [%s] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: %v", requestID, err)
		} else if cache != nil {
			log.Printf("[TIKTOK] [%s] –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: file_id=%s", requestID, cache.TelegramFileID)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∏–∑ –∫—ç—à–∞
			video := &tele.Video{File: tele.File{FileID: cache.TelegramFileID}, Caption: "–í–∞—à–µ TikTok –≤–∏–¥–µ–æ! (–∏–∑ –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è)"}
			err = b.sendVideoWithRetry(c, video, url, 10)
			if err != nil {
				log.Printf("[TIKTOK] [%s] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: %v", requestID, err)
				b.sendError(c, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ TikTok –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[SEND_CACHE_ERROR_TIKTOK] "+url)
			} else {
				log.Printf("[TIKTOK] [%s] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è", requestID)
			}
			return
		} else {
			log.Printf("[TIKTOK] [%s] TikTok –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è, –Ω–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ", requestID)
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –º—å—é—Ç–µ–∫—Å –¥–ª—è —ç—Ç–æ–≥–æ URL
	urlMutex := b.getURLMutex(url)
	urlMutex.Lock()
	defer func() {
		urlMutex.Unlock()
		// –û—á–∏—â–∞–µ–º –º—å—é—Ç–µ–∫—Å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
		go func() {
			time.Sleep(30 * time.Second)
			b.cleanupURLMutex(url)
		}()
	}()

	log.Printf("[TIKTOK] [%s] –ü–æ–ª—É—á–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è URL: %s", requestID, url)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
	_ = b.startDownload(url, requestID, userID)
	defer func() {
		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
		b.finishDownload(url, nil)
	}()

	// –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ tmp —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := os.MkdirAll("./tmp", 0755); err != nil {
		log.Printf("[TIKTOK] [%s] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ tmp: %v", requestID, err)
		b.sendError(c, "–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é TikTok.", err, "[TMP_DIR_TIKTOK] "+url)
		if chargeID != "" && amount > 0 {
			log.Printf("[TIKTOK] [%s] –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤: charge_id=%s, user_id=%d, amount=%d", requestID, chargeID, userID, amount)
			payment.RefundStarPayment(userID, chargeID, amount, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –¥–ª—è TikTok")
		}
		return
	}

	c.Send("–°–∫–∞—á–∏–≤–∞—é TikTok –≤–∏–¥–µ–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
	select {
	case b.downloadLimiter <- struct{}{}:
		log.Printf("[TIKTOK] [%s] –ü–æ–ª—É—á–µ–Ω —Å–ª–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", requestID)
		defer func() {
			<-b.downloadLimiter
			log.Printf("[TIKTOK] [%s] –û—Å–≤–æ–±–æ–∂–¥–µ–Ω —Å–ª–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", requestID)
		}()

		// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å URL —Ö–µ—à–µ–º –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–∏
		urlHash := fmt.Sprintf("%x", md5.Sum([]byte(url)))[:8]
		filename, err := downloader.DownloadTikTokVideoWithUserIDAndURL(url, userID, requestID, urlHash)
		if err != nil {
			b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[TikTok] "+url)
			payment.RefundStarPayment(userID, chargeID, amount, "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è TikTok –≤–∏–¥–µ–æ")
			// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
			b.finishDownload(url, err)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ URL
		expectedPrefix := fmt.Sprintf("tiktok_user%d_%s_%s", userID, requestID, urlHash)
		if !strings.Contains(filepath.Base(filename), expectedPrefix) {
			log.Printf("[TIKTOK] [%s] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: —Ñ–∞–π–ª %s –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d –∏–ª–∏ URL %s", requestID, filename, userID, url)
			b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", fmt.Errorf("—Ñ–∞–π–ª –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ URL"), "[FILE_OWNERSHIP_TIKTOK] "+url)
			if chargeID != "" && amount > 0 {
				log.Printf("[TIKTOK] [%s] –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤: charge_id=%s, user_id=%d, amount=%d", requestID, chargeID, userID, amount)
				payment.RefundStarPayment(userID, chargeID, amount, "–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ TikTok —Ñ–∞–π–ª–∞")
			}
			// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
			b.finishDownload(url, fmt.Errorf("—Ñ–∞–π–ª –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ URL"))
			return
		}

		video := &tele.Video{File: tele.FromDisk(filename), Caption: "–í–∞—à–µ TikTok –≤–∏–¥–µ–æ!"}
		err = b.sendVideoWithRetry(c, video, url, 10)
		if err != nil {
			if info, statErr := os.Stat(filename); statErr == nil {
				sizeMB := float64(info.Size()) / 1024.0 / 1024.0
				b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[SEND_TIKTOK] "+url, fmt.Sprintf("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: %.2f –ú–ë", sizeMB))
			} else {
				b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[SEND_TIKTOK] "+url)
			}
			payment.RefundStarPayment(userID, chargeID, amount, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ TikTok –≤–∏–¥–µ–æ")
			// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
			b.finishDownload(url, err)
			return
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ –∫—ç—à
		if video.File.FileID != "" {
			if err := storage.SaveVideoToCache(b.db, url, video.File.FileID); err != nil {
				log.Printf("[TIKTOK] [%s] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: %v", requestID, err)
			} else {
				log.Printf("[TIKTOK] [%s] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: file_id=%s", requestID, video.File.FileID)
			}
		}

		os.Remove(filename)
		log.Printf("[TIKTOK] [%s] –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è URL: %s", requestID, url)
	default:
		c.Send("–°–µ–π—á–∞—Å –º–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")
	}
}

func (b *Bot) CheckUserSubscriptionRaw(channelUsername string, userID int64) (bool, error) {
	api := b.api
	chat, err := api.ChatByUsername(channelUsername)
	if err != nil {
		log.Printf("[SUB_CHECK] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞: %v", err)
		return false, err
	}
	member, err := api.ChatMemberOf(chat, &tele.User{ID: userID})
	if err != nil {
		log.Printf("[SUB_CHECK] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: %v", err)
		return false, err
	}
	log.Printf("[SUB_CHECK] –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", member.Role)
	if member.Role == tele.Member || member.Role == tele.Administrator || member.Role == tele.Creator {
		log.Printf("[SUB_CHECK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª")
		return true, nil
	}
	log.Printf("[SUB_CHECK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª")
	return false, nil
}

func (b *Bot) sendError(c tele.Context, userMsg string, err error, extraInfo ...string) {
	// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî —Ç–æ–ª—å–∫–æ –æ–±—â–∏–π —Ç–µ–∫—Å—Ç
	_ = c.Send(userMsg)
	// –ê–¥–º–∏–Ω—É ‚Äî –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
	if b.adminID != "" {
		adminID, errParse := strconv.ParseInt(b.adminID, 10, 64)
		if errParse == nil {
			details := []string{"[ERROR] " + err.Error()}
			if len(extraInfo) > 0 {
				details = append(details, extraInfo...)
			}
			msg := strings.Join(details, "\n")
			_, _ = b.api.Send(&tele.User{ID: adminID}, msg)
		}
	}
}

func toStr(id int64) string {
	return strconv.FormatInt(id, 10)
}
