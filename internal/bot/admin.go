package bot

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"

	"YoutubeDownloader/internal/payment"
	"YoutubeDownloader/internal/storage"

	tele "gopkg.in/telebot.v4"
)

func (b *Bot) sendAdminTransactionsMenu(c tele.Context) error {
	transactions := b.transactionService.GetAllTransactions()
	if len(transactions) == 0 {
		return c.Send("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç.")
	}
	var btns [][]tele.InlineButton
	for _, trx := range transactions {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã–µ
		if trx.Status == "success" {
			caption := fmt.Sprintf("%s | %d XTR | %d", trx.InvoicePayload, trx.Amount, trx.TelegramUserID)
			btns = append(btns, []tele.InlineButton{{
				Text: caption,
				Data: "admin_refund|" + trx.TelegramPaymentChargeID,
			}})
		}
	}
	if len(btns) == 0 {
		return c.Send("–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
	}
	markup := &tele.ReplyMarkup{InlineKeyboard: btns}
	return c.Send("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞):", markup)
}

func (b *Bot) handleAdminRefund(c tele.Context, chargeID string) error {
	trxs := b.transactionService.GetAllTransactions()
	for _, trx := range trxs {
		if trx.TelegramPaymentChargeID == chargeID {
			// –î–µ–ª–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç –≤—Å–µ–≥–¥–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
			err := payment.RefundStarPayment(trx.TelegramUserID, trx.TelegramPaymentChargeID, trx.Amount, "–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞")
			if err != nil {
				b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[ADMIN_REFUND] "+chargeID)
				return nil
			}
			b.transactionService.MarkRefunded(chargeID)
			return c.Send("–í–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: " + chargeID)
		}
	}
	// –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é ‚Äî –ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Å –ø—É—Å—Ç—ã–º–∏ amount –∏ userID
	err := payment.RefundStarPayment(0, chargeID, 0, "–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞ (id –Ω–µ –Ω–∞–π–¥–µ–Ω)")
	if err != nil {
		b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[ADMIN_REFUND] "+chargeID)
		return nil
	}
	return c.Send("–ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: " + chargeID)
}

// –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–∫–∞–∑–∞—Ç—å user_id –≤—Ä—É—á–Ω—É—é
func (b *Bot) handleAdminRefundWithUserID(c tele.Context, chargeID string, userID int64) error {
	trxs := b.transactionService.GetAllTransactions()
	for _, trx := range trxs {
		if trx.TelegramPaymentChargeID == chargeID {
			if userID == 0 {
				userID = trx.TelegramUserID
			}
			err := payment.RefundStarPayment(userID, trx.TelegramPaymentChargeID, trx.Amount, "–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞")
			if err != nil {
				b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[ADMIN_REFUND_USERID] "+chargeID)
				return nil
			}
			b.transactionService.MarkRefunded(chargeID)
			return c.Send("–í–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: " + chargeID)
		}
	}
	if userID == 0 {
		return c.Send("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞ –∏ user_id –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
	}
	err := payment.RefundStarPayment(userID, chargeID, 0, "–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞ (user_id —É–∫–∞–∑–∞–Ω –≤—Ä—É—á–Ω—É—é)")
	if err != nil {
		b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[ADMIN_REFUND_USERID] "+chargeID)
		return nil
	}
	return c.Send("–ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: " + chargeID + " —Å user_id: " + strconv.FormatInt(userID, 10))
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞
func (b *Bot) sendTestInvoice(c tele.Context) error {
	log.Printf("[TEST] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å")

	invoice := &tele.Invoice{
		Title:       "–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å",
		Description: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
		Payload:     "test|123",
		Currency:    "XTR",
		Prices:      []tele.Price{{Label: "–¢–µ—Å—Ç", Amount: 1}},
	}

	log.Printf("[TEST] –¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å: %+v", invoice)

	// –î–ª—è Telegram Stars –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ provider token
	_, err := b.api.Send(c.Sender(), invoice)
	if err != nil {
		log.Printf("[TEST] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞: %v", err)
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞: %v", err))
	} else {
		log.Printf("[TEST] –¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
	}
	return c.Send("–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ –±–µ–∑ PreCheckoutQuery
func (b *Bot) sendDirectInvoice(c tele.Context) error {
	log.Printf("[TEST_DIRECT] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –±–µ–∑ PreCheckoutQuery")

	invoice := &tele.Invoice{
		Title:       "–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –±–µ–∑ PreCheckoutQuery",
		Description: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ PreCheckoutQuery",
		Payload:     "test_direct|123",
		Currency:    "XTR",
		Prices:      []tele.Price{{Label: "–¢–µ—Å—Ç", Amount: 1}},
	}

	log.Printf("[TEST_DIRECT] –¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å: %+v", invoice)

	// –î–ª—è Telegram Stars –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ provider token
	_, err := b.api.Send(c.Sender(), invoice)
	if err != nil {
		log.Printf("[TEST_DIRECT] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞ –±–µ–∑ PreCheckoutQuery: %v", err)
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞ –±–µ–∑ PreCheckoutQuery: %v", err))
	} else {
		log.Printf("[TEST_DIRECT] –¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –±–µ–∑ PreCheckoutQuery –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
	}
	return c.Send("–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –±–µ–∑ PreCheckoutQuery –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
func (b *Bot) sendBotInfo(c tele.Context) error {
	info := fmt.Sprintf("ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n\n" +
		"üí° –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n" +
		"1. –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ @BotFather\n" +
		"2. –í–∫–ª—é—á–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞\n" +
		"3. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ (XTR)\n\n" +
		"üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n" +
		"/test_invoice - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å\n" +
		"/test_precheckout - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é\n" +
		"/api_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API\n\n" +
		"‚ö†Ô∏è –ï—Å–ª–∏ PreCheckoutQuery –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç:\n" +
		"1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –≤ @BotFather\n" +
		"2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–ª–∞—Ç–µ–∂–∏ –≤–∫–ª—é—á–µ–Ω—ã\n" +
		"3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞\n" +
		"4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä—Å–∏—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ telebot\n" +
		"5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API")

	return c.Send(info)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API
func (b *Bot) sendAPIInfo(c tele.Context) error {
	useOfficialAPI := os.Getenv("USE_OFFICIAL_API") == "true"
	apiURL := os.Getenv("TELEGRAM_API_URL")

	var info string
	if useOfficialAPI {
		info = fmt.Sprintf("üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API:\n\n" +
			"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –û–§–ò–¶–ò–ê–õ–¨–ù–´–ô Telegram Bot API\n" +
			"URL: https://api.telegram.org\n\n" +
			"üí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ API:\n" +
			"‚Ä¢ –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π Telegram\n" +
			"‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PreCheckoutQuery\n" +
			"‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π\n\n" +
			"‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n" +
			"‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ (50 –ú–ë)\n" +
			"‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤\n\n" +
			"üîß –î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π API:\n" +
			"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ USE_OFFICIAL_API=false –≤ .env")
	} else {
		info = fmt.Sprintf("üè† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API:\n\n"+
			"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –õ–û–ö–ê–õ–¨–ù–´–ô Telegram Bot API\n"+
			"URL: %s\n\n"+
			"üí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API:\n"+
			"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (–¥–æ 2 –ì–ë)\n"+
			"‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤\n"+
			"‚Ä¢ –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ —Ä–∞–∑–º–µ—Ä\n\n"+
			"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n"+
			"‚Ä¢ –ù–µ–ø–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ PreCheckoutQuery\n"+
			"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ Telegram Stars\n"+
			"‚Ä¢ –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π\n\n"+
			"üîß –î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API:\n"+
			"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ USE_OFFICIAL_API=true –≤ .env\n\n"+
			"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:\n"+
			"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API", apiURL)
	}

	return c.Send(info)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
func (b *Bot) sendCacheStats(c tele.Context) error {
	count, err := storage.GetCacheStats(b.db)
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: %v", err))
	}

	info := fmt.Sprintf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:\n\n"+
		"üìÅ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ: %d\n\n"+
		"üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"+
		"/cache_clean <–¥–Ω–∏> - —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π\n"+
		"/cache_clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à", count)

	return c.Send(info)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞
func (b *Bot) cleanOldCache(c tele.Context, days int) error {
	err := storage.CleanOldCache(b.db, days)
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: %v", err))
	}

	return c.Send(fmt.Sprintf("‚úÖ –£–¥–∞–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞ —Å—Ç–∞—Ä—à–µ %d –¥–Ω–µ–π", days))
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
func (b *Bot) clearAllCache(c tele.Context) error {
	// –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞
	query := `DELETE FROM video_cache`
	_, err := b.db.Exec(query)
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: %v", err))
	}

	return c.Send("‚úÖ –í–µ—Å—å –∫—ç—à –æ—á–∏—â–µ–Ω")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏—è—Ö
func (b *Bot) sendActiveDownloads(c tele.Context) error {
	b.downloadInfoMutex.RLock()
	defer b.downloadInfoMutex.RUnlock()

	if len(b.activeDownloads) == 0 {
		return c.Send("üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –Ω–µ—Ç")
	}

	var info strings.Builder
	info.WriteString(fmt.Sprintf("üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (%d):\n\n", len(b.activeDownloads)))

	for url, downloadInfo := range b.activeDownloads {
		duration := time.Since(downloadInfo.StartTime)
		info.WriteString(fmt.Sprintf("üîó URL: %s\n", url))
		info.WriteString(fmt.Sprintf("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %d\n", downloadInfo.UserID))
		info.WriteString(fmt.Sprintf("üÜî Request ID: %s\n", downloadInfo.RequestID))
		info.WriteString(fmt.Sprintf("‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %s\n", duration.Round(time.Second)))
		info.WriteString("---\n")
	}

	return c.Send(info.String())
}
