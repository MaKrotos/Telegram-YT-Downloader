package bot

import (
	"fmt"
	"strings"
	"time"

	"YoutubeDownloader/internal/payment"
	"YoutubeDownloader/internal/storage"

	tele "gopkg.in/telebot.v4"
)

// sendAdminTransactionsMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞
func (b *Bot) sendAdminTransactionsMenu(c tele.Context) error {
	logger := NewLogger("ADMIN")

	transactions := b.transactionService.GetAllTransactions()
	if len(transactions) == 0 {
		return c.Send("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç.")
	}

	var btns [][]tele.InlineButton
	for _, trx := range transactions {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã–µ
		if trx.Status == "success" {
			caption := fmt.Sprintf("%s | %d XTR | %d", trx.InvoicePayload, trx.Amount, trx.TelegramUserID)
			btns = append(btns, []tele.InlineButton{{
				Text: caption,
				Data: CallbackAdminRefund + "|" + trx.TelegramPaymentChargeID,
			}})
		}
	}

	if len(btns) == 0 {
		return c.Send("–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
	}

	markup := &tele.ReplyMarkup{InlineKeyboard: btns}
	logger.Info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞")
	return c.Send("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞):", markup)
}

// handleAdminRefund –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∞–¥–º–∏–Ω–æ–º
func (b *Bot) handleAdminRefund(c tele.Context, chargeID string) error {
	logger := NewLogger("ADMIN_REFUND")

	trxs := b.transactionService.GetAllTransactions()
	for _, trx := range trxs {
		if trx.TelegramPaymentChargeID == chargeID {
			// –î–µ–ª–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç –≤—Å–µ–≥–¥–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
			err := payment.RefundStarPayment(trx.TelegramUserID, trx.TelegramPaymentChargeID, trx.Amount, "–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞")
			if err != nil {
				logger.LogErrorWithContext("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤", err, chargeID)
				return c.Send(fmt.Sprintf("‚ùå –í–æ–∑–≤—Ä–∞—Ç –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ %s\n\n–û—à–∏–±–∫–∞: %v", chargeID, err))
			}

			b.transactionService.MarkRefunded(chargeID)
			logger.Info("–í–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %s", chargeID)
			return c.Send(fmt.Sprintf("‚úÖ –í–æ–∑–≤—Ä–∞—Ç –£–°–ü–ï–®–ù–û –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ %s\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %d\n–°—É–º–º–∞: %d ‚≠ê", chargeID, trx.TelegramUserID, trx.Amount))
		}
	}

	// –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é ‚Äî –ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Å –ø—É—Å—Ç—ã–º–∏ amount –∏ userID
	err := payment.RefundStarPayment(0, chargeID, 0, "–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞ (id –Ω–µ –Ω–∞–π–¥–µ–Ω)")
	if err != nil {
		logger.LogErrorWithContext("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ (id –Ω–µ –Ω–∞–π–¥–µ–Ω)", err, chargeID)
		return c.Send(fmt.Sprintf("‚ùå –í–æ–∑–≤—Ä–∞—Ç –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ %s\n\n–û—à–∏–±–∫–∞: %v\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞", chargeID, err))
	}

	logger.Info("–ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %s", chargeID)
	return c.Send(fmt.Sprintf("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ %s\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞, –Ω–æ –≤–æ–∑–≤—Ä–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram", chargeID))
}

// handleAdminRefundWithUserID –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∞–¥–º–∏–Ω–æ–º —Å —É–∫–∞–∑–∞–Ω–∏–µ–º user_id
func (b *Bot) handleAdminRefundWithUserID(c tele.Context, chargeID string, userID int64) error {
	logger := NewLogger("ADMIN_REFUND_USERID")

	trxs := b.transactionService.GetAllTransactions()
	for _, trx := range trxs {
		if trx.TelegramPaymentChargeID == chargeID {
			if userID == 0 {
				userID = trx.TelegramUserID
			}

			err := payment.RefundStarPayment(userID, trx.TelegramPaymentChargeID, trx.Amount, "–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞")
			if err != nil {
				logger.LogErrorWithContext("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤", err, chargeID)
				return c.Send(fmt.Sprintf("‚ùå –í–æ–∑–≤—Ä–∞—Ç –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ %s\n\n–û—à–∏–±–∫–∞: %v\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %d", chargeID, err, userID))
			}

			b.transactionService.MarkRefunded(chargeID)
			logger.Info("–í–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %s", chargeID)
			return c.Send(fmt.Sprintf("‚úÖ –í–æ–∑–≤—Ä–∞—Ç –£–°–ü–ï–®–ù–û –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ %s\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %d\n–°—É–º–º–∞: %d ‚≠ê", chargeID, userID, trx.Amount))
		}
	}

	if userID == 0 {
		return c.Send("‚ùå –í–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω\n\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞ –∏ user_id –Ω–µ —É–∫–∞–∑–∞–Ω")
	}

	err := payment.RefundStarPayment(userID, chargeID, 0, "–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞ (user_id —É–∫–∞–∑–∞–Ω –≤—Ä—É—á–Ω—É—é)")
	if err != nil {
		logger.LogErrorWithContext("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ (user_id —É–∫–∞–∑–∞–Ω –≤—Ä—É—á–Ω—É—é)", err, chargeID)
		return c.Send(fmt.Sprintf("‚ùå –í–æ–∑–≤—Ä–∞—Ç –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ %s\n\n–û—à–∏–±–∫–∞: %v\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %d\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞", chargeID, err, userID))
	}

	logger.Info("–ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %s —Å user_id: %d", chargeID, userID)
	return c.Send(fmt.Sprintf("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ %s\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %d\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞, –Ω–æ –≤–æ–∑–≤—Ä–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram", chargeID, userID))
}

// sendTestInvoice –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å
func (b *Bot) sendTestInvoice(c tele.Context) error {
	logger := NewLogger("TEST")
	logger.Info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å")

	invoice := &tele.Invoice{
		Title:       "–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å",
		Description: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
		Payload:     "test|123",
		Currency:    "XTR",
		Prices:      []tele.Price{{Label: "–¢–µ—Å—Ç", Amount: 1}},
	}

	logger.Info("–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å: %+v", invoice)

	// –î–ª—è Telegram Stars –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ provider token
	_, err := b.api.Send(c.Sender(), invoice)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞: %v", err)
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞: %v", err))
	}

	logger.Info("–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
	return c.Send("–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
}

// sendDirectInvoice –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –±–µ–∑ PreCheckoutQuery
func (b *Bot) sendDirectInvoice(c tele.Context) error {
	logger := NewLogger("TEST_DIRECT")
	logger.Info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –±–µ–∑ PreCheckoutQuery")

	invoice := &tele.Invoice{
		Title:       "–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –±–µ–∑ PreCheckoutQuery",
		Description: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ PreCheckoutQuery",
		Payload:     "test_direct|123",
		Currency:    "XTR",
		Prices:      []tele.Price{{Label: "–¢–µ—Å—Ç", Amount: 1}},
	}

	logger.Info("–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å: %+v", invoice)

	// –î–ª—è Telegram Stars –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ provider token
	_, err := b.api.Send(c.Sender(), invoice)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞ –±–µ–∑ PreCheckoutQuery: %v", err)
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞ –±–µ–∑ PreCheckoutQuery: %v", err))
	}

	logger.Info("–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –±–µ–∑ PreCheckoutQuery –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
	return c.Send("–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –±–µ–∑ PreCheckoutQuery –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
}

// sendBotInfo –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
func (b *Bot) sendBotInfo(c tele.Context) error {
	info := fmt.Sprintf("ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n\n" +
		"üí° –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n" +
		"1. –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ @BotFather\n" +
		"2. –í–∫–ª—é—á–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞\n" +
		"3. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ (XTR)\n\n" +
		"üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n" +
		"/test_invoice - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å\n" +
		"/test_precheckout - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é\n" +
		"/api_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API\n\n" +
		"‚ö†Ô∏è –ï—Å–ª–∏ PreCheckoutQuery –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç:\n" +
		"1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –≤ @BotFather\n" +
		"2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–ª–∞—Ç–µ–∂–∏ –≤–∫–ª—é—á–µ–Ω—ã\n" +
		"3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞\n" +
		"4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä—Å–∏—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ telebot\n" +
		"5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API")

	return c.Send(info)
}

// sendAPIInfo –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API
func (b *Bot) sendAPIInfo(c tele.Context) error {
	var info string
	if b.config.UseOfficialAPI {
		info = fmt.Sprintf("üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API:\n\n"+
			"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –û–§–ò–¶–ò–ê–õ–¨–ù–´–ô Telegram Bot API\n"+
			"URL: %s\n\n"+
			"üí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ API:\n"+
			"‚Ä¢ –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π Telegram\n"+
			"‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PreCheckoutQuery\n"+
			"‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π\n\n"+
			"‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n"+
			"‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ (50 –ú–ë)\n"+
			"‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤\n\n"+
			"üîß –î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π API:\n"+
			"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ USE_OFFICIAL_API=false –≤ .env", b.config.TelegramAPIURL)
	} else {
		info = fmt.Sprintf("üè† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API:\n\n"+
			"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –õ–û–ö–ê–õ–¨–ù–´–ô Telegram Bot API\n"+
			"URL: %s\n\n"+
			"üí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API:\n"+
			"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (–¥–æ 2 –ì–ë)\n"+
			"‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤\n"+
			"‚Ä¢ –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ —Ä–∞–∑–º–µ—Ä\n\n"+
			"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n"+
			"‚Ä¢ –ù–µ–ø–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ PreCheckoutQuery\n"+
			"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ Telegram Stars\n"+
			"‚Ä¢ –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π\n\n"+
			"üîß –î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API:\n"+
			"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ USE_OFFICIAL_API=true –≤ .env\n\n"+
			"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:\n"+
			"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API", b.config.TelegramAPIURL)
	}

	return c.Send(info)
}

// sendCacheStats –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
func (b *Bot) sendCacheStats(c tele.Context) error {
	logger := NewLogger("CACHE")

	count, err := storage.GetCacheStats(b.db)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: %v", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞")
	}

	info := fmt.Sprintf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:\n\n"+
		"üìÅ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ: %d\n\n"+
		"üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"+
		"/cache_clean <–¥–Ω–∏> - —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π\n"+
		"/cache_clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à", count)

	return c.Send(info)
}

// cleanOldCache –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∫—ç—à–∞
func (b *Bot) cleanOldCache(c tele.Context, days int) error {
	logger := NewLogger("CACHE")

	err := storage.CleanOldCache(b.db, days)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: %v", err)
		return c.Send("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞")
	}

	logger.Info("–û—á–∏—â–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞ —Å—Ç–∞—Ä—à–µ %d –¥–Ω–µ–π", days)
	return c.Send(fmt.Sprintf("‚úÖ –£–¥–∞–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞ —Å—Ç–∞—Ä—à–µ %d –¥–Ω–µ–π", days))
}

// clearAllCache –æ—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à
func (b *Bot) clearAllCache(c tele.Context) error {
	logger := NewLogger("CACHE")

	// –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞
	query := `DELETE FROM video_cache`
	_, err := b.db.Exec(query)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: %v", err)
		return c.Send("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞")
	}

	logger.Info("–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω –∫—ç—à")
	return c.Send("‚úÖ –í–µ—Å—å –∫—ç—à –æ—á–∏—â–µ–Ω")
}

// sendActiveDownloads –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏—è—Ö
func (b *Bot) sendActiveDownloads(c tele.Context) error {
	logger := NewLogger("DOWNLOADS")

	activeDownloads := b.downloadManager.GetActiveDownloads()
	if len(activeDownloads) == 0 {
		return c.Send("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –Ω–µ—Ç.")
	}

	var info strings.Builder
	info.WriteString(fmt.Sprintf("üì• –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (%d):\n\n", len(activeDownloads)))

	for url, downloadInfo := range activeDownloads {
		duration := time.Since(downloadInfo.StartTime)
		info.WriteString(fmt.Sprintf("üîó %s\n", url))
		info.WriteString(fmt.Sprintf("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %d\n", downloadInfo.UserID))
		info.WriteString(fmt.Sprintf("üÜî Request ID: %s\n", downloadInfo.RequestID))
		info.WriteString(fmt.Sprintf("‚è±Ô∏è –í—Ä–µ–º—è: %v\n\n", duration))
	}

	logger.Info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± %d –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏—è—Ö", len(activeDownloads))
	return c.Send(info.String())
}

// formatBytesAdmin —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ (–¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π)
func formatBytesAdmin(bytes int64) string {
	const unit = 1024
	if bytes < unit {
		return fmt.Sprintf("%d B", bytes)
	}
	div, exp := int64(unit), 0
	for n := bytes / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(bytes)/float64(div), "KMGTPE"[exp])
}

// testSubscription —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
func (b *Bot) testSubscription(c tele.Context) error {
	logger := NewLogger("TEST_SUBSCRIPTION")

	if b.config.ChannelUsername == "" {
		return c.Send("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
	}

	userID := c.Sender().ID
	logger.Info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –Ω–∞ –∫–∞–Ω–∞–ª %s", userID, b.config.ChannelUsername)

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
	isSub, err := b.CheckUserSubscriptionRaw(b.config.ChannelUsername, userID)

	if err != nil {
		errorMsg := fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n%s\n\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª\n‚Ä¢ –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞\n‚Ä¢ –ö–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π", err.Error())
		return c.Send(errorMsg)
	}

	if isSub {
		return c.Send(fmt.Sprintf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª %s", userID, b.config.ChannelUsername))
	} else {
		return c.Send(fmt.Sprintf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª %s", userID, b.config.ChannelUsername))
	}
}

// testChannel —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
func (b *Bot) testChannel(c tele.Context) error {
	logger := NewLogger("TEST_CHANNEL")

	if b.config.ChannelUsername == "" {
		return c.Send("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
	}

	logger.Info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É %s", b.config.ChannelUsername)

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
	chat, err := b.api.ChatByUsername(b.config.ChannelUsername)
	if err != nil {
		errorMsg := fmt.Sprintf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª %s:\n\n%s\n\nüí° –†–µ—à–µ–Ω–∏—è:\n‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞\n‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π", b.config.ChannelUsername, err.Error())
		return c.Send(errorMsg)
	}

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤ –∫–∞–Ω–∞–ª–µ
	botMember, err := b.api.ChatMemberOf(chat, &tele.User{ID: b.api.Me.ID})
	if err != nil {
		errorMsg := fmt.Sprintf("‚ö†Ô∏è –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞:\n\n%s\n\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª\n‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É –±–æ—Ç–∞", err.Error())
		return c.Send(errorMsg)
	}

	info := fmt.Sprintf("‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω:\n\nüì¢ –ù–∞–∑–≤–∞–Ω–∏–µ: %s\nüÜî ID: %d\nüë§ –¢–∏–ø: %s\n\nü§ñ –†–æ–ª—å –±–æ—Ç–∞: %s\n\nüí° –°—Ç–∞—Ç—É—Å: %s",
		chat.Title, chat.ID, chat.Type, botMember.Role,
		func() string {
			if botMember.Role == "administrator" || botMember.Role == "creator" {
				return "‚úÖ –ë–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"
			} else {
				return "‚ùå –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"
			}
		}())

	return c.Send(info)
}

// showConfig –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
func (b *Bot) showConfig(c tele.Context) error {
	logger := NewLogger("CONFIG")

	info := fmt.Sprintf("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞:\n\n"+
		"ü§ñ Admin ID: %s\n"+
		"üì¢ Channel Username: %s\n"+
		"üåê Use Official API: %t\n"+
		"üîó API URL: %s\n"+
		"üë• Max Workers: %d\n"+
		"‚è±Ô∏è HTTP Timeout: %v\n"+
		"üì• Download Timeout: %v",
		b.config.AdminID,
		b.config.ChannelUsername,
		b.config.UseOfficialAPI,
		b.config.TelegramAPIURL,
		b.config.MaxWorkers,
		b.config.HTTPTimeout,
		b.config.DownloadTimeout)

	logger.Info("–ü–æ–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞")
	return c.Send(info)
}
