package bot

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
	"sync"
	"time"

	"YoutubeDownloader/internal/downloader"
	"YoutubeDownloader/internal/payment"
	"YoutubeDownloader/internal/storage"

	"crypto/md5"

	tele "gopkg.in/telebot.v4"
)

type Bot struct {
	api                *tele.Bot
	adminID            string
	providerToken      string
	transactionService *payment.TransactionService
	channelUsername    string
	downloadLimiter    chan struct{}
	downloadMutex      map[string]*sync.Mutex   // –ú—å—é—Ç–µ–∫—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ URL
	mutexMutex         sync.RWMutex             // –ú—å—é—Ç–µ–∫—Å –¥–ª—è –∑–∞—â–∏—Ç—ã map
	activeDownloads    map[string]*DownloadInfo // –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
	downloadInfoMutex  sync.RWMutex             // –ú—å—é—Ç–µ–∫—Å –¥–ª—è –∑–∞—â–∏—Ç—ã activeDownloads
	db                 *sql.DB
}

// DownloadInfo —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏
type DownloadInfo struct {
	RequestID string
	UserID    int64
	StartTime time.Time
	Done      chan struct{} // –ö–∞–Ω–∞–ª –¥–ª—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
	Error     error         // –û—à–∏–±–∫–∞, –µ—Å–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
}

func NewBot(token, adminID, providerToken string, db *sql.DB) (*Bot, error) {
	// –î–ª—è Telegram Stars provider token –Ω–µ –Ω—É–∂–µ–Ω
	log.Printf("[BOT] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è Telegram Stars")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ
	useOfficialAPI := os.Getenv("USE_OFFICIAL_API") == "true"
	if useOfficialAPI {
		log.Printf("[BOT] –ò—Å–ø–æ–ª—å–∑—É–µ–º –û–§–ò–¶–ò–ê–õ–¨–ù–´–ô Telegram Bot API")
	} else {
		log.Printf("[BOT] –ò—Å–ø–æ–ª—å–∑—É–µ–º –õ–û–ö–ê–õ–¨–ù–´–ô Telegram Bot API (aiogram/telegram-bot-api)")
	}

	channelUsername := os.Getenv("CHANNEL_USERNAME")
	maxWorkers := 3
	if mwStr := os.Getenv("MAX_DOWNLOAD_WORKERS"); mwStr != "" {
		if mw, err := strconv.Atoi(mwStr); err == nil && mw > 0 {
			maxWorkers = mw
		}
	}
	settings := tele.Settings{
		Token:  token,
		Poller: &tele.LongPoller{Timeout: 60 * time.Second},
	}
	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç HTTP-–∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
	settings.Client = &http.Client{
		Timeout: 120 * time.Second,
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ URL –¥–ª—è API
	if useOfficialAPI {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API Telegram
		settings.URL = "https://api.telegram.org"
		log.Printf("[BOT] URL API: %s", settings.URL)
	} else {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π API
		if url := os.Getenv("TELEGRAM_API_URL"); url != "" {
			settings.URL = url
			log.Printf("[BOT] URL API: %s", settings.URL)
		} else {
			log.Printf("[BOT] –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π API URL")
		}
	}

	api, err := tele.NewBot(settings)
	if err != nil {
		return nil, err
	}

	log.Printf("[BOT] –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

	return &Bot{
		api:                api,
		adminID:            adminID,
		providerToken:      "", // –î–ª—è Telegram Stars –Ω–µ –Ω—É–∂–µ–Ω
		transactionService: payment.NewTransactionService(),
		channelUsername:    channelUsername,
		downloadLimiter:    make(chan struct{}, maxWorkers),
		downloadMutex:      make(map[string]*sync.Mutex),
		mutexMutex:         sync.RWMutex{},
		activeDownloads:    make(map[string]*DownloadInfo),
		downloadInfoMutex:  sync.RWMutex{},
		db:                 db,
	}, nil
}

func (b *Bot) Run() {
	// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∞–ø–¥–µ–π—Ç–æ–≤
	b.api.Use(func(next tele.HandlerFunc) tele.HandlerFunc {
		return func(c tele.Context) error {
			update := c.Update()

			// –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –∞–ø–¥–µ–π—Ç–æ–≤
			if update.Message != nil {
				log.Printf("[UPDATE] Message: user_id=%d, text=%q", update.Message.Sender.ID, update.Message.Text)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–ª–∞—Ç–µ–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
				if update.Message.Payment != nil {
					log.Printf("[UPDATE] –ù–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂ –≤ Message: %+v", update.Message.Payment)
					// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ –ø—Ä—è–º–æ –∑–¥–µ—Å—å
					return b.handlePayment(c)
				}
			}
			if update.Callback != nil {
				log.Printf("[UPDATE] CallbackQuery: user_id=%d, data=%q", update.Callback.Sender.ID, update.Callback.Data)
			}
			if update.PreCheckoutQuery != nil {
				log.Printf("[UPDATE] PreCheckoutQuery: user_id=%d", update.PreCheckoutQuery.Sender.ID)
				// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º PreCheckoutQuery
				err := c.Accept()
				if err != nil {
					log.Printf("[PRECHECKOUT] –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: %v", err)
				} else {
					log.Printf("[PRECHECKOUT] PreCheckoutQuery –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è user_id=%d", update.PreCheckoutQuery.Sender.ID)
				}
				return nil // –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏
			}

			return next(c)
		}
	})

	b.api.Handle(tele.OnText, b.handleMessage)
	b.api.Handle(tele.OnCallback, b.handleCallback)
	b.api.Handle(tele.OnPayment, b.handlePayment)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –í–°–ï–• –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–ø–¥–µ–π—Ç–æ–≤
	b.api.Handle(tele.OnForward, b.handleAnyUpdate)
	b.api.Handle(tele.OnReply, b.handleAnyUpdate)
	b.api.Handle(tele.OnEdited, b.handleAnyUpdate)
	b.api.Handle(tele.OnPhoto, b.handleAnyUpdate)
	b.api.Handle(tele.OnAudio, b.handleAnyUpdate)
	b.api.Handle(tele.OnAnimation, b.handleAnyUpdate)
	b.api.Handle(tele.OnDocument, b.handleAnyUpdate)
	b.api.Handle(tele.OnSticker, b.handleAnyUpdate)
	b.api.Handle(tele.OnVideo, b.handleAnyUpdate)
	b.api.Handle(tele.OnVoice, b.handleAnyUpdate)
	b.api.Handle(tele.OnVideoNote, b.handleAnyUpdate)
	b.api.Handle(tele.OnContact, b.handleAnyUpdate)
	b.api.Handle(tele.OnLocation, b.handleAnyUpdate)
	b.api.Handle(tele.OnVenue, b.handleAnyUpdate)
	b.api.Handle(tele.OnDice, b.handleAnyUpdate)
	b.api.Handle(tele.OnInvoice, b.handleAnyUpdate)
	b.api.Handle(tele.OnRefund, b.handleAnyUpdate)
	b.api.Handle(tele.OnGame, b.handleAnyUpdate)
	b.api.Handle(tele.OnPoll, b.handleAnyUpdate)
	b.api.Handle(tele.OnPollAnswer, b.handleAnyUpdate)
	b.api.Handle(tele.OnPinned, b.handleAnyUpdate)
	b.api.Handle(tele.OnChannelPost, b.handleAnyUpdate)
	b.api.Handle(tele.OnEditedChannelPost, b.handleAnyUpdate)
	b.api.Handle(tele.OnTopicCreated, b.handleAnyUpdate)
	b.api.Handle(tele.OnTopicReopened, b.handleAnyUpdate)
	b.api.Handle(tele.OnTopicClosed, b.handleAnyUpdate)
	b.api.Handle(tele.OnTopicEdited, b.handleAnyUpdate)
	b.api.Handle(tele.OnGeneralTopicHidden, b.handleAnyUpdate)
	b.api.Handle(tele.OnGeneralTopicUnhidden, b.handleAnyUpdate)
	b.api.Handle(tele.OnWriteAccessAllowed, b.handleAnyUpdate)
	b.api.Handle(tele.OnAddedToGroup, b.handleAnyUpdate)
	b.api.Handle(tele.OnUserJoined, b.handleAnyUpdate)
	b.api.Handle(tele.OnUserLeft, b.handleAnyUpdate)
	b.api.Handle(tele.OnUserShared, b.handleAnyUpdate)
	b.api.Handle(tele.OnChatShared, b.handleAnyUpdate)
	b.api.Handle(tele.OnNewGroupTitle, b.handleAnyUpdate)
	b.api.Handle(tele.OnNewGroupPhoto, b.handleAnyUpdate)
	b.api.Handle(tele.OnGroupPhotoDeleted, b.handleAnyUpdate)
	b.api.Handle(tele.OnGroupCreated, b.handleAnyUpdate)
	b.api.Handle(tele.OnSuperGroupCreated, b.handleAnyUpdate)
	b.api.Handle(tele.OnChannelCreated, b.handleAnyUpdate)
	b.api.Handle(tele.OnMigration, b.handleAnyUpdate)
	b.api.Handle(tele.OnMedia, b.handleAnyUpdate)
	b.api.Handle(tele.OnQuery, b.handleAnyUpdate)
	b.api.Handle(tele.OnInlineResult, b.handleAnyUpdate)
	b.api.Handle(tele.OnShipping, b.handleAnyUpdate)
	b.api.Handle(tele.OnCheckout, b.handleAnyUpdate)
	b.api.Handle(tele.OnMyChatMember, b.handleAnyUpdate)
	b.api.Handle(tele.OnChatMember, b.handleAnyUpdate)
	b.api.Handle(tele.OnChatJoinRequest, b.handleAnyUpdate)
	b.api.Handle(tele.OnProximityAlert, b.handleAnyUpdate)
	b.api.Handle(tele.OnAutoDeleteTimer, b.handleAnyUpdate)
	b.api.Handle(tele.OnWebApp, b.handleAnyUpdate)
	b.api.Handle(tele.OnVideoChatStarted, b.handleAnyUpdate)
	b.api.Handle(tele.OnVideoChatEnded, b.handleAnyUpdate)
	b.api.Handle(tele.OnVideoChatParticipants, b.handleAnyUpdate)
	b.api.Handle(tele.OnVideoChatScheduled, b.handleAnyUpdate)
	b.api.Handle(tele.OnBoost, b.handleAnyUpdate)
	b.api.Handle(tele.OnBoostRemoved, b.handleAnyUpdate)
	b.api.Handle(tele.OnBusinessConnection, b.handleAnyUpdate)
	b.api.Handle(tele.OnBusinessMessage, b.handleAnyUpdate)
	b.api.Handle(tele.OnEditedBusinessMessage, b.handleAnyUpdate)
	b.api.Handle(tele.OnDeletedBusinessMessages, b.handleAnyUpdate)

	b.api.Start()
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è PreCheckoutQuery
func (b *Bot) handlePreCheckoutQuery(c tele.Context) error {
	preCheckout := c.PreCheckoutQuery()

	if preCheckout == nil {
		return nil
	}

	log.Printf("[PRECHECKOUT] –ü–æ–ª—É—á–µ–Ω PreCheckoutQuery: user_id=%d", preCheckout.Sender.ID)

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—Å–µ PreCheckoutQuery
	err := c.Accept()
	if err != nil {
		log.Printf("[PRECHECKOUT] –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: %v", err)
		return err
	} else {
		log.Printf("[PRECHECKOUT] PreCheckoutQuery –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è user_id=%d", preCheckout.Sender.ID)
	}

	return nil
}

func (b *Bot) handleMessage(c tele.Context) error {
	msg := c.Message()
	log.Printf("[EVENT] handleMessage: user_id=%d, text=%q", msg.Sender.ID, msg.Text)
	if msg.Text == "/start" {
		return c.Send("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å —Ä–∞–∑–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –∑–∞ Telegram Stars. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ!")
	}

	// –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–≤–æ–π—Å–æ–≤
	if msg.Text == "/test_invoice" && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		return b.sendTestInvoice(c)
	}

	// –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ PreCheckoutQuery
	if msg.Text == "/test_precheckout" && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		return c.Send("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –µ–≥–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ PreCheckoutQuery")
	}

	// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
	if msg.Text == "/bot_info" && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		return b.sendBotInfo(c)
	}

	// –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ –±–µ–∑ PreCheckoutQuery
	if msg.Text == "/test_direct" && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		return b.sendDirectInvoice(c)
	}

	// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API
	if msg.Text == "/api_info" && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		return b.sendAPIInfo(c)
	}

	// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º
	if msg.Text == "/cache_stats" && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		return b.sendCacheStats(c)
	}
	if strings.HasPrefix(msg.Text, "/cache_clean ") && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		parts := strings.Fields(msg.Text)
		if len(parts) < 2 {
			return c.Send("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ—Å–ª–µ /cache_clean")
		}
		daysStr := strings.TrimSpace(parts[1])
		days, err := strconv.Atoi(daysStr)
		if err != nil {
			return c.Send("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
		}
		return b.cleanOldCache(c, days)
	}
	if msg.Text == "/cache_clear" && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		return b.clearAllCache(c)
	}
	if msg.Text == "/active_downloads" && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		return b.sendActiveDownloads(c)
	}

	// --- –ë–ª–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
	if msg.Text == "/admin" && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		return b.sendAdminTransactionsMenu(c)
	}
	if strings.HasPrefix(msg.Text, "/refund ") && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		parts := strings.Fields(msg.Text)
		if len(parts) < 2 {
			return c.Send("–£–∫–∞–∂–∏—Ç–µ charge_id –ø–æ—Å–ª–µ /refund")
		}
		chargeID := strings.TrimSpace(parts[1])
		var userID int64 = 0
		if len(parts) >= 3 {
			// –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å user_id
			parsed, err := strconv.ParseInt(parts[2], 10, 64)
			if err != nil {
				return c.Send("user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
			}
			userID = parsed
		}
		return b.handleAdminRefundWithUserID(c, chargeID, userID)
	}
	// --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ---

	// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ª—é–±–æ–π —Å—Å—ã–ª–∫–∏
	urlRegex := regexp.MustCompile(`https?://\S+`)
	url := urlRegex.FindString(msg.Text)
	if url == "" {
		return c.Send("–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
	}

	if b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		go b.sendVideo(c, url, "", 0)
		return nil
	}
	if b.channelUsername != "" {
		isSub, err := b.CheckUserSubscriptionRaw(b.channelUsername, msg.Sender.ID)
		if err == nil && isSub {
			go b.sendVideo(c, url, "", 0)
			return nil
		}
	}
	return b.sendUniversalPayKeyboard(c, url)
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø–ª–∞—Ç—ã
func (b *Bot) sendUniversalPayKeyboard(c tele.Context, url string) error {
	// –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending' –∏ –ø–æ–ª—É—á–∞–µ–º id
	id, err := payment.CreatePendingTransaction(b.db, c.Sender().ID, 1, url)
	if err != nil {
		log.Printf("[DB] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}
	// –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
	trxs1, err1 := payment.GetAllTransactionsFromDB(b.db)
	if err1 == nil {
		log.Printf("[DEBUG] –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è pending: %+v", trxs1)
	} else {
		log.Printf("[DEBUG] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: %v", err1)
	}
	btns := [][]tele.InlineButton{
		{{Text: "–°–∫–∞—á–∞—Ç—å –∑–∞ 1 –∑–≤–µ–∑–¥—É", Data: fmt.Sprintf("pay_video|%d", id)}},
		{{Text: "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü –∑–∞ 30 –∑–≤—ë–∑–¥", Data: "pay_subscribe"}},
		{{Text: "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥ –∑–∞ 200 –∑–≤—ë–∑–¥", Data: "pay_subscribe_year"}},
		{{Text: "–ù–∞–≤—Å–µ–≥–¥–∞ –∑–∞ 1000 –∑–≤—ë–∑–¥", Data: "pay_subscribe_forever"}},
	}
	if b.channelUsername != "" {
		btns = append(btns, []tele.InlineButton{{Text: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", URL: "https://t.me/" + strings.TrimPrefix(b.channelUsername, "@")}})
	}
	msgText := "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
	if b.channelUsername != "" {
		msgText = fmt.Sprintf("–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ %s –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n%s", b.channelUsername, msgText)
	}
	markup := &tele.ReplyMarkup{InlineKeyboard: btns}
	return c.Send(msgText, markup)
}

func (b *Bot) handleCallback(c tele.Context) error {
	cb := c.Callback()
	log.Printf("[EVENT] handleCallback: user_id=%d, data=%q", cb.Sender.ID, cb.Data)
	data := cb.Data
	// chatID := c.Sender().ID // —É–¥–∞–ª–µ–Ω–æ –∫–∞–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ
	if data == "pay_subscribe" {
		return b.sendSubscribeInvoice(c, "month")
	}
	if data == "pay_subscribe_year" {
		return b.sendSubscribeInvoice(c, "year")
	}
	if data == "pay_subscribe_forever" {
		return b.sendSubscribeInvoice(c, "forever")
	}
	if strings.HasPrefix(data, "pay_video|") {
		idStr := strings.TrimPrefix(data, "pay_video|")
		id, err := strconv.ParseInt(idStr, 10, 64)
		if err != nil {
			return c.Send("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
		}
		trx, err := payment.GetTransactionByID(b.db, id)
		if err != nil {
			return c.Send("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.")
		}
		return b.sendVideoInvoiceByDB(c, trx)
	}
	if strings.HasPrefix(data, "pay_tiktok|") {
		url := strings.TrimPrefix(data, "pay_tiktok|")

		return b.sendTikTokInvoice(c, url)
	}
	// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
	if strings.HasPrefix(data, "admin_refund|") && b.adminID != "" && b.adminID == toStr(c.Sender().ID) {
		chargeID := strings.TrimPrefix(data, "admin_refund|")
		return b.handleAdminRefund(c, chargeID)
	}
	// --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ ---
	return nil
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ –ë–î
func (b *Bot) sendVideoInvoiceByDB(c tele.Context, trx *payment.Transaction) error {
	log.Printf("[INVOICE] –°–æ–∑–¥–∞—ë–º –∏–Ω–≤–æ–π—Å –¥–ª—è user_id=%d, trx_id=%d, url=%s", trx.TelegramUserID, trx.ID, trx.URL)

	invoice := &tele.Invoice{
		Title:       "–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ",
		Description: "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∑–∞ 1 –∑–≤–µ–∑–¥—É",
		Payload:     fmt.Sprintf("video|%d", trx.ID),
		Currency:    "XTR",
		Prices:      []tele.Price{{Label: "–í–∏–¥–µ–æ", Amount: 1}},
	}
	log.Printf("[INVOICE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å: %+v", invoice)
	log.Printf("[INVOICE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %+v", c.Sender())

	// –î–ª—è Telegram Stars –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ provider token
	_, err := b.api.Send(c.Sender(), invoice)
	if err != nil {
		log.Printf("[INVOICE] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞: %v", err)
	} else {
		log.Printf("[INVOICE] –ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
	}
	return err
}

func (b *Bot) sendTikTokInvoice(c tele.Context, url string) error {
	invoice := &tele.Invoice{
		Title:       "–°–∫–∞—á–∞—Ç—å TikTok –≤–∏–¥–µ–æ",
		Description: "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ TikTok –≤–∏–¥–µ–æ –∑–∞ 1 –∑–≤–µ–∑–¥—É",
		Payload:     "tiktok|" + url,
		Currency:    "XTR",
		Prices:      []tele.Price{{Label: "TikTok", Amount: 1}},
	}
	log.Printf("[INVOICE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º TikTok –∏–Ω–≤–æ–π—Å: %+v", invoice)

	// –î–ª—è Telegram Stars –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ provider token
	_, err := b.api.Send(c.Sender(), invoice)
	if err != nil {
		log.Printf("[INVOICE] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ TikTok –∏–Ω–≤–æ–π—Å–∞: %v", err)
	} else {
		log.Printf("[INVOICE] TikTok –∏–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
	}
	return err
}

func (b *Bot) sendSubscribeInvoice(c tele.Context, period string) error {
	var price int
	var label, desc string
	switch period {
	case "month":
		price = 30
		label = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü"
		desc = "–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∑–∞–≥—Ä—É–∑–∫–∞–º –Ω–∞ 1 –º–µ—Å—è—Ü"
	case "year":
		price = 200
		label = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥"
		desc = "–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∑–∞–≥—Ä—É–∑–∫–∞–º –Ω–∞ 1 –≥–æ–¥"
	case "forever":
		price = 1000
		label = "–ù–∞–≤—Å–µ–≥–¥–∞"
		desc = "–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∑–∞–≥—Ä—É–∑–∫–∞–º"
	default:
		return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏")
	}
	invoice := &tele.Invoice{
		Title:       label,
		Description: desc,
		Payload:     "subscribe|" + period,
		Currency:    "XTR",
		Prices:      []tele.Price{{Label: label, Amount: price}},
	}
	log.Printf("[INVOICE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –ø–æ–¥–ø–∏—Å–∫–∏: %+v", invoice)

	// –î–ª—è Telegram Stars –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ provider token
	_, err := b.api.Send(c.Sender(), invoice)
	if err != nil {
		log.Printf("[INVOICE] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
	} else {
		log.Printf("[INVOICE] –ò–Ω–≤–æ–π—Å –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
	}
	return err
}

func (b *Bot) handlePayment(c tele.Context) error {
	log.Printf("[DEBUG] –í—ã–∑–≤–∞–Ω handlePayment")

	// –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
	var paymentInfo *tele.Payment

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ c.Payment()
	paymentInfo = c.Payment()
	if paymentInfo == nil {
		// –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Message
		update := c.Update()
		if update.Message != nil && update.Message.Payment != nil {
			paymentInfo = update.Message.Payment
			log.Printf("[DEBUG] –ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω –≤ Message")
		}
	}

	log.Printf("[EVENT] handlePayment: user_id=%d, paymentInfo=%+v", c.Sender().ID, paymentInfo)

	if paymentInfo == nil {
		log.Printf("[DEBUG] paymentInfo == nil, —Å–æ–±—ã—Ç–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
		return c.Send("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
	}

	userID := c.Sender().ID
	payload := paymentInfo.Payload
	amount := paymentInfo.Total
	chargeID := paymentInfo.ProviderChargeID

	log.Printf("[PAYMENT] –ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞: user_id=%d, payload=%s, amount=%d, charge_id=%s", userID, payload, amount, chargeID)

	// –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	trxs2, err2 := payment.GetAllTransactionsFromDB(b.db)
	if err2 == nil {
		log.Printf("[DEBUG] –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %+v", trxs2)
	} else {
		log.Printf("[DEBUG] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: %v", err2)
	}

	var id int64
	var url string
	if strings.HasPrefix(payload, "video|") {
		idStr := strings.TrimPrefix(payload, "video|")
		var err error
		id, err = strconv.ParseInt(idStr, 10, 64)
		if err != nil {
			log.Printf("[PAYMENT] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ id: %v", err)
			return c.Send("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
		}
		log.Printf("[PAYMENT] –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: id=%d, charge_id=%s", id, chargeID)
		err = payment.UpdateTransactionAfterPayment(b.db, id, chargeID, "success")
		if err != nil {
			log.Printf("[DB] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		}
		trx, err := payment.GetTransactionByID(b.db, id)
		if err != nil {
			log.Printf("[PAYMENT] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: %v", err)
			// –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
			trxs3, err3 := payment.GetAllTransactionsFromDB(b.db)
			if err3 == nil {
				log.Printf("[DEBUG] –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞: %+v", trxs3)
			}
			return c.Send("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")
		}
		url = trx.URL
		log.Printf("[PAYMENT] –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: user_id=%d, trx_id=%d, url=%s", userID, id, url)
	}
	if strings.HasPrefix(payload, "tiktok|") {
		url = strings.TrimPrefix(payload, "tiktok|")
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ë–î
	var err error
	trx := &payment.Transaction{
		TelegramPaymentChargeID: chargeID,
		TelegramUserID:          userID,
		Amount:                  amount,
		InvoicePayload:          payload,
		Status:                  "success",
		Type:                    "stars",
		Reason:                  "",
		URL:                     url,
	}
	_, err = payment.InsertTransaction(b.db, trx)
	if err != nil {
		log.Printf("[DB] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
	}

	if strings.HasPrefix(payload, "video|") {
		go b.sendVideo(c, url, chargeID, amount)
		return c.Send("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å.")
	}
	if strings.HasPrefix(payload, "tiktok|") {
		go b.sendTikTokVideo(c, url, chargeID, amount)
		return c.Send("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°–∫–∞—á–∏–≤–∞–Ω–∏–µ TikTok –Ω–∞—á–∞–ª–æ—Å—å.")
	}
	if strings.HasPrefix(payload, "subscribe|") {
		period := strings.TrimPrefix(payload, "subscribe|")
		// TODO: –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
		return c.Send("–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: " + period)
	}

	if strings.HasPrefix(payload, "test|") {
		log.Printf("[PAYMENT] –ü–æ–ª—É—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂: %s", payload)
		return c.Send("–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
	}

	if strings.HasPrefix(payload, "test_direct|") {
		log.Printf("[PAYMENT] –ü–æ–ª—É—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –±–µ–∑ PreCheckoutQuery: %s", payload)
		return c.Send("–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –±–µ–∑ PreCheckoutQuery –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
	}

	log.Printf("[PAYMENT] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø payload: %s", payload)
	return c.Send("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
}

// –§—É–Ω–∫—Ü–∏—è —Å –ø–æ–≤—Ç–æ—Ä–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
func (b *Bot) sendVideoWithRetry(c tele.Context, video *tele.Video, url string, maxRetries int) error {
	var lastErr error
	for i := 0; i < maxRetries; i++ {
		err := c.Send(video)
		if err == nil {
			return nil
		}
		if strings.Contains(err.Error(), "context deadline exceeded") || strings.Contains(err.Error(), "Client.Timeout exceeded") {
			if i < maxRetries-1 {
				time.Sleep(2 * time.Second)
				continue
			}
		}
		lastErr = err
		break
	}
	return lastErr
}

func (b *Bot) sendVideo(c tele.Context, url string, chargeID string, amount int) {
	userID := c.Sender().ID
	requestID := fmt.Sprintf("req_%d_%s", userID, randomString(6))
	log.Printf("[VIDEO] [%s] –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: user_id=%d, url=%s, charge_id=%s, amount=%d", requestID, userID, url, chargeID, amount)

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
	cache, err := storage.GetVideoFromCache(b.db, url)
	if err != nil {
		log.Printf("[VIDEO] [%s] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞: %v", requestID, err)
	} else if cache != nil {
		log.Printf("[VIDEO] [%s] –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: file_id=%s", requestID, cache.TelegramFileID)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∏–∑ –∫—ç—à–∞
		video := &tele.Video{File: tele.File{FileID: cache.TelegramFileID}, Caption: "–í–∞—à–µ –≤–∏–¥–µ–æ! (–∏–∑ –∫—ç—à–∞)"}
		err = b.sendVideoWithRetry(c, video, url, 10)
		if err != nil {
			log.Printf("[VIDEO] [%s] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –∫—ç—à–∞: %v", requestID, err)
			// –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ –∫—ç—à–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –∫—ç—à–∞ –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
			storage.DeleteVideoFromCache(b.db, url)
			log.Printf("[VIDEO] [%s] –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∏–∑ –∫—ç—à–∞, —Å–∫–∞—á–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ", requestID)
		} else {
			log.Printf("[VIDEO] [%s] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞", requestID)
			return
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ URL
	if b.isDownloadActive(url) {
		log.Printf("[VIDEO] [%s] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è URL: %s, –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è", requestID, url)
		c.Send("–≠—Ç–æ –≤–∏–¥–µ–æ —É–∂–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –û–∂–∏–¥–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

		// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 10 –º–∏–Ω—É—Ç)
		downloadInfo, err := b.waitForDownload(url, 10*time.Minute)
		if err != nil {
			log.Printf("[VIDEO] [%s] –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: %v", requestID, err)
			b.sendError(c, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[TIMEOUT] "+url)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏
		if downloadInfo.Error != nil {
			log.Printf("[VIDEO] [%s] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π: %v", requestID, downloadInfo.Error)
			b.sendError(c, "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", downloadInfo.Error, "[DOWNLOAD_ERROR] "+url)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
		cache, err = storage.GetVideoFromCache(b.db, url)
		if err != nil {
			log.Printf("[VIDEO] [%s] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: %v", requestID, err)
		} else if cache != nil {
			log.Printf("[VIDEO] [%s] –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: file_id=%s", requestID, cache.TelegramFileID)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∏–∑ –∫—ç—à–∞
			video := &tele.Video{File: tele.File{FileID: cache.TelegramFileID}, Caption: "–í–∞—à–µ –≤–∏–¥–µ–æ! (–∏–∑ –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è)"}
			err = b.sendVideoWithRetry(c, video, url, 10)
			if err != nil {
				log.Printf("[VIDEO] [%s] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: %v", requestID, err)
				b.sendError(c, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[SEND_CACHE_ERROR] "+url)
			} else {
				log.Printf("[VIDEO] [%s] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è", requestID)
			}
			return
		} else {
			log.Printf("[VIDEO] [%s] –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è, –Ω–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ", requestID)
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –º—å—é—Ç–µ–∫—Å –¥–ª—è —ç—Ç–æ–≥–æ URL
	urlMutex := b.getURLMutex(url)
	urlMutex.Lock()
	defer func() {
		urlMutex.Unlock()
		// –û—á–∏—â–∞–µ–º –º—å—é—Ç–µ–∫—Å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
		go func() {
			time.Sleep(30 * time.Second)
			b.cleanupURLMutex(url)
		}()
	}()

	log.Printf("[VIDEO] [%s] –ü–æ–ª—É—á–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è URL: %s", requestID, url)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
	_ = b.startDownload(url, requestID, userID)
	defer func() {
		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
		b.finishDownload(url, nil)
	}()

	// –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ tmp —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := os.MkdirAll("./tmp", 0755); err != nil {
		log.Printf("[VIDEO] [%s] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ tmp: %v", requestID, err)
		b.sendError(c, "–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.", err, "[TMP_DIR] "+url)
		if chargeID != "" && amount > 0 {
			log.Printf("[VIDEO] [%s] –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤: charge_id=%s, user_id=%d, amount=%d", requestID, chargeID, userID, amount)
			payment.RefundStarPayment(userID, chargeID, amount, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏")
		}
		return
	}

	c.Send("–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
	select {
	case b.downloadLimiter <- struct{}{}:
		log.Printf("[VIDEO] [%s] –ü–æ–ª—É—á–µ–Ω —Å–ª–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", requestID)
		defer func() {
			<-b.downloadLimiter
			log.Printf("[VIDEO] [%s] –û—Å–≤–æ–±–æ–∂–¥–µ–Ω —Å–ª–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", requestID)
		}()

		// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å URL —Ö–µ—à–µ–º –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–∏
		urlHash := fmt.Sprintf("%x", md5.Sum([]byte(url)))[:8]
		filename, err := downloader.DownloadYouTubeVideoWithUserIDAndURL(url, userID, requestID, urlHash)
		if err != nil {
			log.Printf("[VIDEO] [%s] –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: %v", requestID, err)
			b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[DL] "+url)
			if chargeID != "" && amount > 0 {
				log.Printf("[VIDEO] [%s] –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤: charge_id=%s, user_id=%d, amount=%d", requestID, chargeID, userID, amount)
				payment.RefundStarPayment(userID, chargeID, amount, "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ")
			}
			// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
			b.finishDownload(url, err)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ URL
		expectedPrefix := fmt.Sprintf("ytvideo_user%d_%s_%s", userID, requestID, urlHash)
		if !strings.Contains(filepath.Base(filename), expectedPrefix) {
			log.Printf("[VIDEO] [%s] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: —Ñ–∞–π–ª %s –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d –∏–ª–∏ URL %s", requestID, filename, userID, url)
			b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", fmt.Errorf("—Ñ–∞–π–ª –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ URL"), "[FILE_OWNERSHIP] "+url)
			if chargeID != "" && amount > 0 {
				log.Printf("[VIDEO] [%s] –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤: charge_id=%s, user_id=%d, amount=%d", requestID, chargeID, userID, amount)
				payment.RefundStarPayment(userID, chargeID, amount, "–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞")
			}
			// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
			b.finishDownload(url, fmt.Errorf("—Ñ–∞–π–ª –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ URL"))
			return
		}

		video := &tele.Video{File: tele.FromDisk(filename), Caption: "–í–∞—à–µ –≤–∏–¥–µ–æ!"}
		log.Printf("[VIDEO] [%s] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª: %s", requestID, filename)
		err = b.sendVideoWithRetry(c, video, url, 10)
		if err != nil {
			log.Printf("[VIDEO] [%s] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", requestID, err)
			if info, statErr := os.Stat(filename); statErr == nil {
				sizeMB := float64(info.Size()) / 1024.0 / 1024.0
				b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[SEND_VIDEO] "+url, fmt.Sprintf("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: %.2f –ú–ë", sizeMB))
			} else {
				b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[SEND_VIDEO] "+url)
			}
			if chargeID != "" && amount > 0 {
				log.Printf("[VIDEO] [%s] –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤: charge_id=%s, user_id=%d, amount=%d", requestID, chargeID, userID, amount)
				payment.RefundStarPayment(userID, chargeID, amount, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ")
			}
			// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
			b.finishDownload(url, err)
			return
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ –∫—ç—à
		if video.File.FileID != "" {
			if err := storage.SaveVideoToCache(b.db, url, video.File.FileID); err != nil {
				log.Printf("[VIDEO] [%s] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: %v", requestID, err)
			} else {
				log.Printf("[VIDEO] [%s] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: file_id=%s", requestID, video.File.FileID)
			}
		}

		os.Remove(filename)
		log.Printf("[VIDEO] [%s] –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è URL: %s", requestID, url)
	default:
		c.Send("–°–µ–π—á–∞—Å –º–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")
	}
}

func (b *Bot) sendTikTokVideo(c tele.Context, url string, chargeID string, amount int) {
	userID := c.Sender().ID
	requestID := fmt.Sprintf("tiktok_%d_%s", userID, randomString(6))
	log.Printf("[TIKTOK] [%s] –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: user_id=%d, url=%s, charge_id=%s, amount=%d", requestID, userID, url, chargeID, amount)

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
	cache, err := storage.GetVideoFromCache(b.db, url)
	if err != nil {
		log.Printf("[TIKTOK] [%s] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞: %v", requestID, err)
	} else if cache != nil {
		log.Printf("[TIKTOK] [%s] –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: file_id=%s", requestID, cache.TelegramFileID)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∏–∑ –∫—ç—à–∞
		video := &tele.Video{File: tele.File{FileID: cache.TelegramFileID}, Caption: "–í–∞—à–µ TikTok –≤–∏–¥–µ–æ! (–∏–∑ –∫—ç—à–∞)"}
		err = b.sendVideoWithRetry(c, video, url, 10)
		if err != nil {
			log.Printf("[TIKTOK] [%s] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –∫—ç—à–∞: %v", requestID, err)
			// –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ –∫—ç—à–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –∫—ç—à–∞ –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
			storage.DeleteVideoFromCache(b.db, url)
			log.Printf("[TIKTOK] [%s] –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∏–∑ –∫—ç—à–∞, —Å–∫–∞—á–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ", requestID)
		} else {
			log.Printf("[TIKTOK] [%s] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞", requestID)
			return
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ URL
	if b.isDownloadActive(url) {
		log.Printf("[TIKTOK] [%s] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è URL: %s, –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è", requestID, url)
		c.Send("–≠—Ç–æ TikTok –≤–∏–¥–µ–æ —É–∂–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –û–∂–∏–¥–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

		// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 10 –º–∏–Ω—É—Ç)
		downloadInfo, err := b.waitForDownload(url, 10*time.Minute)
		if err != nil {
			log.Printf("[TIKTOK] [%s] –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: %v", requestID, err)
			b.sendError(c, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[TIMEOUT_TIKTOK] "+url)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏
		if downloadInfo.Error != nil {
			log.Printf("[TIKTOK] [%s] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π: %v", requestID, downloadInfo.Error)
			b.sendError(c, "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", downloadInfo.Error, "[DOWNLOAD_ERROR_TIKTOK] "+url)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
		cache, err = storage.GetVideoFromCache(b.db, url)
		if err != nil {
			log.Printf("[TIKTOK] [%s] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: %v", requestID, err)
		} else if cache != nil {
			log.Printf("[TIKTOK] [%s] –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: file_id=%s", requestID, cache.TelegramFileID)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∏–∑ –∫—ç—à–∞
			video := &tele.Video{File: tele.File{FileID: cache.TelegramFileID}, Caption: "–í–∞—à–µ TikTok –≤–∏–¥–µ–æ! (–∏–∑ –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è)"}
			err = b.sendVideoWithRetry(c, video, url, 10)
			if err != nil {
				log.Printf("[TIKTOK] [%s] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: %v", requestID, err)
				b.sendError(c, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ TikTok –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[SEND_CACHE_ERROR_TIKTOK] "+url)
			} else {
				log.Printf("[TIKTOK] [%s] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è", requestID)
			}
			return
		} else {
			log.Printf("[TIKTOK] [%s] TikTok –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è, –Ω–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ", requestID)
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –º—å—é—Ç–µ–∫—Å –¥–ª—è —ç—Ç–æ–≥–æ URL
	urlMutex := b.getURLMutex(url)
	urlMutex.Lock()
	defer func() {
		urlMutex.Unlock()
		// –û—á–∏—â–∞–µ–º –º—å—é—Ç–µ–∫—Å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
		go func() {
			time.Sleep(30 * time.Second)
			b.cleanupURLMutex(url)
		}()
	}()

	log.Printf("[TIKTOK] [%s] –ü–æ–ª—É—á–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è URL: %s", requestID, url)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
	_ = b.startDownload(url, requestID, userID)
	defer func() {
		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
		b.finishDownload(url, nil)
	}()

	// –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ tmp —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := os.MkdirAll("./tmp", 0755); err != nil {
		log.Printf("[TIKTOK] [%s] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ tmp: %v", requestID, err)
		b.sendError(c, "–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é TikTok.", err, "[TMP_DIR_TIKTOK] "+url)
		if chargeID != "" && amount > 0 {
			log.Printf("[TIKTOK] [%s] –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤: charge_id=%s, user_id=%d, amount=%d", requestID, chargeID, userID, amount)
			payment.RefundStarPayment(userID, chargeID, amount, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –¥–ª—è TikTok")
		}
		return
	}

	c.Send("–°–∫–∞—á–∏–≤–∞—é TikTok –≤–∏–¥–µ–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
	select {
	case b.downloadLimiter <- struct{}{}:
		log.Printf("[TIKTOK] [%s] –ü–æ–ª—É—á–µ–Ω —Å–ª–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", requestID)
		defer func() {
			<-b.downloadLimiter
			log.Printf("[TIKTOK] [%s] –û—Å–≤–æ–±–æ–∂–¥–µ–Ω —Å–ª–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", requestID)
		}()

		// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å URL —Ö–µ—à–µ–º –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–∏
		urlHash := fmt.Sprintf("%x", md5.Sum([]byte(url)))[:8]
		filename, err := downloader.DownloadTikTokVideoWithUserIDAndURL(url, userID, requestID, urlHash)
		if err != nil {
			b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[TikTok] "+url)
			payment.RefundStarPayment(userID, chargeID, amount, "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è TikTok –≤–∏–¥–µ–æ")
			// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
			b.finishDownload(url, err)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ URL
		expectedPrefix := fmt.Sprintf("tiktok_user%d_%s_%s", userID, requestID, urlHash)
		if !strings.Contains(filepath.Base(filename), expectedPrefix) {
			log.Printf("[TIKTOK] [%s] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: —Ñ–∞–π–ª %s –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d –∏–ª–∏ URL %s", requestID, filename, userID, url)
			b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", fmt.Errorf("—Ñ–∞–π–ª –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ URL"), "[FILE_OWNERSHIP_TIKTOK] "+url)
			if chargeID != "" && amount > 0 {
				log.Printf("[TIKTOK] [%s] –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤: charge_id=%s, user_id=%d, amount=%d", requestID, chargeID, userID, amount)
				payment.RefundStarPayment(userID, chargeID, amount, "–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ TikTok —Ñ–∞–π–ª–∞")
			}
			// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
			b.finishDownload(url, fmt.Errorf("—Ñ–∞–π–ª –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ URL"))
			return
		}

		video := &tele.Video{File: tele.FromDisk(filename), Caption: "–í–∞—à–µ TikTok –≤–∏–¥–µ–æ!"}
		err = b.sendVideoWithRetry(c, video, url, 10)
		if err != nil {
			if info, statErr := os.Stat(filename); statErr == nil {
				sizeMB := float64(info.Size()) / 1024.0 / 1024.0
				b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[SEND_TIKTOK] "+url, fmt.Sprintf("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: %.2f –ú–ë", sizeMB))
			} else {
				b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[SEND_TIKTOK] "+url)
			}
			payment.RefundStarPayment(userID, chargeID, amount, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ TikTok –≤–∏–¥–µ–æ")
			// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
			b.finishDownload(url, err)
			return
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ –∫—ç—à
		if video.File.FileID != "" {
			if err := storage.SaveVideoToCache(b.db, url, video.File.FileID); err != nil {
				log.Printf("[TIKTOK] [%s] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: %v", requestID, err)
			} else {
				log.Printf("[TIKTOK] [%s] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: file_id=%s", requestID, video.File.FileID)
			}
		}

		os.Remove(filename)
		log.Printf("[TIKTOK] [%s] –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è URL: %s", requestID, url)
	default:
		c.Send("–°–µ–π—á–∞—Å –º–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")
	}
}

func (b *Bot) CheckUserSubscriptionRaw(channelUsername string, userID int64) (bool, error) {
	api := b.api
	chat, err := api.ChatByUsername(channelUsername)
	if err != nil {
		log.Printf("[SUB_CHECK] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞: %v", err)
		return false, err
	}
	member, err := api.ChatMemberOf(chat, &tele.User{ID: userID})
	if err != nil {
		log.Printf("[SUB_CHECK] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: %v", err)
		return false, err
	}
	log.Printf("[SUB_CHECK] –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", member.Role)
	if member.Role == tele.Member || member.Role == tele.Administrator || member.Role == tele.Creator {
		log.Printf("[SUB_CHECK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª")
		return true, nil
	}
	log.Printf("[SUB_CHECK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª")
	return false, nil
}

func (b *Bot) sendAdminTransactionsMenu(c tele.Context) error {
	transactions := b.transactionService.GetAllTransactions()
	if len(transactions) == 0 {
		return c.Send("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç.")
	}
	var btns [][]tele.InlineButton
	for _, trx := range transactions {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã–µ
		if trx.Status == "success" {
			caption := fmt.Sprintf("%s | %d XTR | %d", trx.InvoicePayload, trx.Amount, trx.TelegramUserID)
			btns = append(btns, []tele.InlineButton{{
				Text: caption,
				Data: "admin_refund|" + trx.TelegramPaymentChargeID,
			}})
		}
	}
	if len(btns) == 0 {
		return c.Send("–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
	}
	markup := &tele.ReplyMarkup{InlineKeyboard: btns}
	return c.Send("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞):", markup)
}

func (b *Bot) handleAdminRefund(c tele.Context, chargeID string) error {
	trxs := b.transactionService.GetAllTransactions()
	for _, trx := range trxs {
		if trx.TelegramPaymentChargeID == chargeID {
			// –î–µ–ª–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç –≤—Å–µ–≥–¥–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
			err := payment.RefundStarPayment(trx.TelegramUserID, trx.TelegramPaymentChargeID, trx.Amount, "–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞")
			if err != nil {
				b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[ADMIN_REFUND] "+chargeID)
				return nil
			}
			b.transactionService.MarkRefunded(chargeID)
			return c.Send("–í–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: " + chargeID)
		}
	}
	// –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é ‚Äî –ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Å –ø—É—Å—Ç—ã–º–∏ amount –∏ userID
	err := payment.RefundStarPayment(0, chargeID, 0, "–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞ (id –Ω–µ –Ω–∞–π–¥–µ–Ω)")
	if err != nil {
		b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[ADMIN_REFUND] "+chargeID)
		return nil
	}
	return c.Send("–ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: " + chargeID)
}

// –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–∫–∞–∑–∞—Ç—å user_id –≤—Ä—É—á–Ω—É—é
func (b *Bot) handleAdminRefundWithUserID(c tele.Context, chargeID string, userID int64) error {
	trxs := b.transactionService.GetAllTransactions()
	for _, trx := range trxs {
		if trx.TelegramPaymentChargeID == chargeID {
			if userID == 0 {
				userID = trx.TelegramUserID
			}
			err := payment.RefundStarPayment(userID, trx.TelegramPaymentChargeID, trx.Amount, "–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞")
			if err != nil {
				b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[ADMIN_REFUND_USERID] "+chargeID)
				return nil
			}
			b.transactionService.MarkRefunded(chargeID)
			return c.Send("–í–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: " + chargeID)
		}
	}
	if userID == 0 {
		return c.Send("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞ –∏ user_id –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
	}
	err := payment.RefundStarPayment(userID, chargeID, 0, "–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞ (user_id —É–∫–∞–∑–∞–Ω –≤—Ä—É—á–Ω—É—é)")
	if err != nil {
		b.sendError(c, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", err, "[ADMIN_REFUND_USERID] "+chargeID)
		return nil
	}
	return c.Send("–ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: " + chargeID + " —Å user_id: " + strconv.FormatInt(userID, 10))
}

func (b *Bot) sendError(c tele.Context, userMsg string, err error, extraInfo ...string) {
	// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî —Ç–æ–ª—å–∫–æ –æ–±—â–∏–π —Ç–µ–∫—Å—Ç
	_ = c.Send(userMsg)
	// –ê–¥–º–∏–Ω—É ‚Äî –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
	if b.adminID != "" {
		adminID, errParse := strconv.ParseInt(b.adminID, 10, 64)
		if errParse == nil {
			details := []string{"[ERROR] " + err.Error()}
			if len(extraInfo) > 0 {
				details = append(details, extraInfo...)
			}
			msg := strings.Join(details, "\n")
			_, _ = b.api.Send(&tele.User{ID: adminID}, msg)
		}
	}
}

func toStr(id int64) string {
	return strconv.FormatInt(id, 10)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
func randomString(n int) string {
	letters := []rune("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")
	b := make([]rune, n)
	for i := range b {
		b[i] = letters[int64(i+os.Getpid()+n)%int64(len(letters))]
	}
	return string(b)
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞
func (b *Bot) sendTestInvoice(c tele.Context) error {
	log.Printf("[TEST] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å")

	invoice := &tele.Invoice{
		Title:       "–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å",
		Description: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
		Payload:     "test|123",
		Currency:    "XTR",
		Prices:      []tele.Price{{Label: "–¢–µ—Å—Ç", Amount: 1}},
	}

	log.Printf("[TEST] –¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å: %+v", invoice)

	// –î–ª—è Telegram Stars –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ provider token
	_, err := b.api.Send(c.Sender(), invoice)
	if err != nil {
		log.Printf("[TEST] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞: %v", err)
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞: %v", err))
	} else {
		log.Printf("[TEST] –¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
	}
	return c.Send("–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ –±–µ–∑ PreCheckoutQuery
func (b *Bot) sendDirectInvoice(c tele.Context) error {
	log.Printf("[TEST_DIRECT] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –±–µ–∑ PreCheckoutQuery")

	invoice := &tele.Invoice{
		Title:       "–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –±–µ–∑ PreCheckoutQuery",
		Description: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ PreCheckoutQuery",
		Payload:     "test_direct|123",
		Currency:    "XTR",
		Prices:      []tele.Price{{Label: "–¢–µ—Å—Ç", Amount: 1}},
	}

	log.Printf("[TEST_DIRECT] –¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å: %+v", invoice)

	// –î–ª—è Telegram Stars –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ provider token
	_, err := b.api.Send(c.Sender(), invoice)
	if err != nil {
		log.Printf("[TEST_DIRECT] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞ –±–µ–∑ PreCheckoutQuery: %v", err)
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞ –±–µ–∑ PreCheckoutQuery: %v", err))
	} else {
		log.Printf("[TEST_DIRECT] –¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –±–µ–∑ PreCheckoutQuery –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
	}
	return c.Send("–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –±–µ–∑ PreCheckoutQuery –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
func (b *Bot) sendBotInfo(c tele.Context) error {
	info := fmt.Sprintf("ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n\n" +
		"üí° –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n" +
		"1. –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ @BotFather\n" +
		"2. –í–∫–ª—é—á–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞\n" +
		"3. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ (XTR)\n\n" +
		"üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n" +
		"/test_invoice - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å\n" +
		"/test_precheckout - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é\n" +
		"/api_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API\n\n" +
		"‚ö†Ô∏è –ï—Å–ª–∏ PreCheckoutQuery –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç:\n" +
		"1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –≤ @BotFather\n" +
		"2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–ª–∞—Ç–µ–∂–∏ –≤–∫–ª—é—á–µ–Ω—ã\n" +
		"3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞\n" +
		"4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä—Å–∏—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ telebot\n" +
		"5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API")

	return c.Send(info)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API
func (b *Bot) sendAPIInfo(c tele.Context) error {
	useOfficialAPI := os.Getenv("USE_OFFICIAL_API") == "true"
	apiURL := os.Getenv("TELEGRAM_API_URL")

	var info string
	if useOfficialAPI {
		info = fmt.Sprintf("üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API:\n\n" +
			"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –û–§–ò–¶–ò–ê–õ–¨–ù–´–ô Telegram Bot API\n" +
			"URL: https://api.telegram.org\n\n" +
			"üí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ API:\n" +
			"‚Ä¢ –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π Telegram\n" +
			"‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PreCheckoutQuery\n" +
			"‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π\n\n" +
			"‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n" +
			"‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ (50 –ú–ë)\n" +
			"‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤\n\n" +
			"üîß –î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π API:\n" +
			"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ USE_OFFICIAL_API=false –≤ .env")
	} else {
		info = fmt.Sprintf("üè† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API:\n\n"+
			"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –õ–û–ö–ê–õ–¨–ù–´–ô Telegram Bot API\n"+
			"URL: %s\n\n"+
			"üí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API:\n"+
			"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (–¥–æ 2 –ì–ë)\n"+
			"‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤\n"+
			"‚Ä¢ –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ —Ä–∞–∑–º–µ—Ä\n\n"+
			"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n"+
			"‚Ä¢ –ù–µ–ø–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ PreCheckoutQuery\n"+
			"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ Telegram Stars\n"+
			"‚Ä¢ –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π\n\n"+
			"üîß –î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API:\n"+
			"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ USE_OFFICIAL_API=true –≤ .env\n\n"+
			"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:\n"+
			"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API", apiURL)
	}

	return c.Send(info)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –í–°–ï–• —Ç–∏–ø–æ–≤ –∞–ø–¥–µ–π—Ç–æ–≤
func (b *Bot) handleAnyUpdate(c tele.Context) error {
	// –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º nil - –∞–ø–¥–µ–π—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
	return nil
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
func getMessageType(msg *tele.Message) string {
	if msg.Text != "" {
		return "text"
	} else if msg.Photo != nil {
		return "photo"
	} else if msg.Video != nil {
		return "video"
	} else if msg.Audio != nil {
		return "audio"
	} else if msg.Document != nil {
		return "document"
	} else if msg.Sticker != nil {
		return "sticker"
	} else if msg.Voice != nil {
		return "voice"
	} else if msg.VideoNote != nil {
		return "video_note"
	} else if msg.Contact != nil {
		return "contact"
	} else if msg.Location != nil {
		return "location"
	} else if msg.Venue != nil {
		return "venue"
	} else if msg.Poll != nil {
		return "poll"
	} else if msg.Dice != nil {
		return "dice"
	} else if msg.Animation != nil {
		return "animation"
	} else if msg.Payment != nil {
		return "payment"
	}
	return "unknown"
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∞–ø–¥–µ–π—Ç–∞
func getUpdateType(update *tele.Update) string {
	if update.Message != nil {
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
		msg := update.Message
		if msg.Text != "" {
			return "message_text"
		} else if msg.Photo != nil {
			return "message_photo"
		} else if msg.Video != nil {
			return "message_video"
		} else if msg.Audio != nil {
			return "message_audio"
		} else if msg.Document != nil {
			return "message_document"
		} else if msg.Sticker != nil {
			return "message_sticker"
		} else if msg.Voice != nil {
			return "message_voice"
		} else if msg.VideoNote != nil {
			return "message_video_note"
		} else if msg.Contact != nil {
			return "message_contact"
		} else if msg.Location != nil {
			return "message_location"
		} else if msg.Venue != nil {
			return "message_venue"
		} else if msg.Poll != nil {
			return "message_poll"
		} else if msg.Dice != nil {
			return "message_dice"
		} else if msg.Animation != nil {
			return "message_animation"
		} else if msg.Payment != nil {
			return "message_payment"
		} else if msg.Invoice != nil {
			return "message_invoice"
		} else if msg.Game != nil {
			return "message_game"
		} else if msg.ReplyTo != nil {
			return "message_reply"
		} else if msg.PinnedMessage != nil {
			return "message_pinned"
		} else if msg.WebAppData != nil {
			return "message_web_app"
		} else if msg.VideoChatStarted != nil {
			return "message_video_chat_started"
		} else if msg.VideoChatEnded != nil {
			return "message_video_chat_ended"
		} else if msg.VideoChatScheduled != nil {
			return "message_video_chat_scheduled"
		} else if msg.BoostAdded != nil {
			return "message_boost"
		}
		return "message_unknown"
	} else if update.Callback != nil {
		return "callback_query"
	} else if update.PreCheckoutQuery != nil {
		return "pre_checkout_query"
	} else if update.ShippingQuery != nil {
		return "shipping_query"
	} else if update.ChannelPost != nil {
		return "channel_post"
	} else if update.EditedMessage != nil {
		return "edited_message"
	} else if update.EditedChannelPost != nil {
		return "edited_channel_post"
	} else if update.Poll != nil {
		return "poll"
	} else if update.PollAnswer != nil {
		return "poll_answer"
	} else if update.MyChatMember != nil {
		return "my_chat_member"
	} else if update.ChatMember != nil {
		return "chat_member"
	} else if update.ChatJoinRequest != nil {
		return "chat_join_request"
	}
	return "unknown"
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
func (b *Bot) sendCacheStats(c tele.Context) error {
	count, err := storage.GetCacheStats(b.db)
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: %v", err))
	}

	info := fmt.Sprintf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:\n\n"+
		"üìÅ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ: %d\n\n"+
		"üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"+
		"/cache_clean <–¥–Ω–∏> - —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π\n"+
		"/cache_clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à", count)

	return c.Send(info)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞
func (b *Bot) cleanOldCache(c tele.Context, days int) error {
	err := storage.CleanOldCache(b.db, days)
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: %v", err))
	}

	return c.Send(fmt.Sprintf("‚úÖ –£–¥–∞–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞ —Å—Ç–∞—Ä—à–µ %d –¥–Ω–µ–π", days))
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
func (b *Bot) clearAllCache(c tele.Context) error {
	// –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞
	query := `DELETE FROM video_cache`
	_, err := b.db.Exec(query)
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: %v", err))
	}

	return c.Send("‚úÖ –í–µ—Å—å –∫—ç—à –æ—á–∏—â–µ–Ω")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏—è—Ö
func (b *Bot) sendActiveDownloads(c tele.Context) error {
	b.downloadInfoMutex.RLock()
	defer b.downloadInfoMutex.RUnlock()

	if len(b.activeDownloads) == 0 {
		return c.Send("üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –Ω–µ—Ç")
	}

	var info strings.Builder
	info.WriteString(fmt.Sprintf("üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (%d):\n\n", len(b.activeDownloads)))

	for url, downloadInfo := range b.activeDownloads {
		duration := time.Since(downloadInfo.StartTime)
		info.WriteString(fmt.Sprintf("üîó URL: %s\n", url))
		info.WriteString(fmt.Sprintf("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %d\n", downloadInfo.UserID))
		info.WriteString(fmt.Sprintf("üÜî Request ID: %s\n", downloadInfo.RequestID))
		info.WriteString(fmt.Sprintf("‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %s\n", duration.Round(time.Second)))
		info.WriteString("---\n")
	}

	return c.Send(info.String())
}

// getURLMutex –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º—å—é—Ç–µ–∫—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ URL
func (b *Bot) getURLMutex(url string) *sync.Mutex {
	b.mutexMutex.RLock()
	mutex, exists := b.downloadMutex[url]
	b.mutexMutex.RUnlock()

	if !exists {
		b.mutexMutex.Lock()
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∑–∞–ø–∏—Å—å
		if mutex, exists = b.downloadMutex[url]; !exists {
			mutex = &sync.Mutex{}
			b.downloadMutex[url] = mutex
		}
		b.mutexMutex.Unlock()
	}

	return mutex
}

// cleanupURLMutex —É–¥–∞–ª—è–µ—Ç –º—å—é—Ç–µ–∫—Å –¥–ª—è URL –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
func (b *Bot) cleanupURLMutex(url string) {
	b.mutexMutex.Lock()
	delete(b.downloadMutex, url)
	b.mutexMutex.Unlock()
}

// startDownload —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
func (b *Bot) startDownload(url, requestID string, userID int64) *DownloadInfo {
	b.downloadInfoMutex.Lock()
	defer b.downloadInfoMutex.Unlock()

	downloadInfo := &DownloadInfo{
		RequestID: requestID,
		UserID:    userID,
		StartTime: time.Now(),
		Done:      make(chan struct{}),
	}

	b.activeDownloads[url] = downloadInfo
	log.Printf("[DOWNLOAD] [%s] –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è URL: %s", requestID, url)

	return downloadInfo
}

// finishDownload —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
func (b *Bot) finishDownload(url string, err error) {
	b.downloadInfoMutex.Lock()
	defer b.downloadInfoMutex.Unlock()

	if downloadInfo, exists := b.activeDownloads[url]; exists {
		downloadInfo.Error = err
		close(downloadInfo.Done)
		delete(b.activeDownloads, url)
		log.Printf("[DOWNLOAD] [%s] –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è URL: %s (–æ—à–∏–±–∫–∞: %v)", downloadInfo.RequestID, url, err)
	}
}

// waitForDownload –∂–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
func (b *Bot) waitForDownload(url string, timeout time.Duration) (*DownloadInfo, error) {
	b.downloadInfoMutex.RLock()
	downloadInfo, exists := b.activeDownloads[url]
	b.downloadInfoMutex.RUnlock()

	if !exists {
		return nil, nil // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
	}

	log.Printf("[DOWNLOAD] –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è URL: %s (–Ω–∞—á–∞—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %d)", url, downloadInfo.UserID)

	select {
	case <-downloadInfo.Done:
		return downloadInfo, nil
	case <-time.After(timeout):
		return nil, fmt.Errorf("—Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
	}
}

// isDownloadActive –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è URL
func (b *Bot) isDownloadActive(url string) bool {
	b.downloadInfoMutex.RLock()
	defer b.downloadInfoMutex.RUnlock()

	_, exists := b.activeDownloads[url]
	return exists
}
