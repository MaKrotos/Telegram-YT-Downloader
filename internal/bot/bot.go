package bot

import (
	"database/sql"
	"fmt"
	"log"
	"os"
	"regexp"
	"strconv"
	"strings"
	"time"

	"YoutubeDownloader/internal/downloader"
	"YoutubeDownloader/internal/payment"

	tele "gopkg.in/telebot.v4"
)

type Bot struct {
	api                *tele.Bot
	adminID            string
	providerToken      string
	transactionService *payment.TransactionService
	channelUsername    string
	downloadLimiter    chan struct{}
	db                 *sql.DB
}

func NewBot(token, adminID, providerToken string, db *sql.DB) (*Bot, error) {
	if providerToken == "" {
		providerToken = "XTR"
	}
	channelUsername := os.Getenv("CHANNEL_USERNAME")
	maxWorkers := 3
	if mwStr := os.Getenv("MAX_DOWNLOAD_WORKERS"); mwStr != "" {
		if mw, err := strconv.Atoi(mwStr); err == nil && mw > 0 {
			maxWorkers = mw
		}
	}
	settings := tele.Settings{
		Token:  token,
		Poller: &tele.LongPoller{Timeout: 60 * time.Second},
	}
	if url := os.Getenv("TELEGRAM_API_URL"); url != "" {
		settings.URL = url
	}
	api, err := tele.NewBot(settings)
	if err != nil {
		return nil, err
	}
	return &Bot{
		api:                api,
		adminID:            adminID,
		providerToken:      providerToken,
		transactionService: payment.NewTransactionService(),
		channelUsername:    channelUsername,
		downloadLimiter:    make(chan struct{}, maxWorkers),
		db:                 db,
	}, nil
}

func (b *Bot) Run() {
	b.api.Handle(tele.OnText, b.handleMessage)
	b.api.Handle(tele.OnCallback, b.handleCallback)
	b.api.Handle(tele.OnPayment, b.handlePayment)
	b.api.Start()
}

func (b *Bot) handleMessage(c tele.Context) error {
	msg := c.Message()
	if msg.Text == "/start" {
		return c.Send("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube –∑–∞ Telegram Stars. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube –∏–ª–∏ Shorts!")
	}

	// --- –ë–ª–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
	if msg.Text == "/admin" && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		return b.sendAdminTransactionsMenu(c)
	}
	if strings.HasPrefix(msg.Text, "/refund ") && b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		parts := strings.Fields(msg.Text)
		if len(parts) < 2 {
			return c.Send("–£–∫–∞–∂–∏—Ç–µ charge_id –ø–æ—Å–ª–µ /refund")
		}
		chargeID := strings.TrimSpace(parts[1])
		var userID int64 = 0
		if len(parts) >= 3 {
			// –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å user_id
			parsed, err := strconv.ParseInt(parts[2], 10, 64)
			if err != nil {
				return c.Send("user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
			}
			userID = parsed
		}
		return b.handleAdminRefundWithUserID(c, chargeID, userID)
	}
	// --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ---

	tiktokRegex := regexp.MustCompile(`(https?://)?(www\.)?(tiktok\.com|vm\.tiktok\.com)/[@\w\-?=&#./]+`)
	tiktokURL := tiktokRegex.FindString(msg.Text)
	if tiktokURL != "" {
		if b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
			go b.sendTikTokVideo(c, tiktokURL, "", 0)
			return nil
		}
		if b.channelUsername != "" {
			isSub, err := b.CheckUserSubscriptionRaw(b.channelUsername, msg.Sender.ID)
			if err == nil && isSub {
				go b.sendTikTokVideo(c, tiktokURL, "", 0)
				return nil
			}
		}
		return b.sendTikTokPayKeyboard(c, tiktokURL)
	}

	ytRegex := regexp.MustCompile(`(https?://)?(www\.)?(youtube\.com|youtu\.be)/[\w\-?=&#./]+`)
	url := ytRegex.FindString(msg.Text)
	if url == "" {
		return c.Send("–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube –∏–ª–∏ TikTok.")
	}
	isVideo := false
	if strings.Contains(url, "watch?v=") {
		isVideo = true
	}
	if strings.Contains(url, "/shorts/") {
		parts := strings.Split(url, "/shorts/")
		if len(parts) > 1 && len(parts[1]) >= 5 {
			isVideo = true
		}
	}
	if strings.Contains(url, "youtu.be/") {
		parts := strings.Split(url, "youtu.be/")
		if len(parts) > 1 && len(parts[1]) >= 5 {
			isVideo = true
		}
	}
	if !isVideo {
		return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤–∏–¥–µ–æ YouTube –∏–ª–∏ Shorts.")
	}
	if b.adminID != "" && b.adminID == toStr(msg.Sender.ID) {
		go b.sendVideo(c, url, "", 0)
		return nil
	}
	if b.channelUsername != "" {
		isSub, err := b.CheckUserSubscriptionRaw(b.channelUsername, msg.Sender.ID)
		if err == nil && isSub {
			go b.sendVideo(c, url, "", 0)
			return nil
		}
	}
	return b.sendYouTubePayKeyboard(c, url)
}

func (b *Bot) sendYouTubePayKeyboard(c tele.Context, url string) error {
	btns := [][]tele.InlineButton{
		{{Text: "–°–∫–∞—á–∞—Ç—å –∑–∞ 1 –∑–≤–µ–∑–¥—É", Data: "pay_video|" + url}},
		{{Text: "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü –∑–∞ 30 –∑–≤—ë–∑–¥", Data: "pay_subscribe"}},
		{{Text: "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥ –∑–∞ 200 –∑–≤—ë–∑–¥", Data: "pay_subscribe_year"}},
		{{Text: "–ù–∞–≤—Å–µ–≥–¥–∞ –∑–∞ 1000 –∑–≤—ë–∑–¥", Data: "pay_subscribe_forever"}},
	}
	if b.channelUsername != "" {
		btns = append(btns, []tele.InlineButton{{Text: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", URL: "https://t.me/" + strings.TrimPrefix(b.channelUsername, "@")}})
	}
	msgText := "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
	if b.channelUsername != "" {
		msgText = fmt.Sprintf("–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ %s –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n%s", b.channelUsername, msgText)
	}
	markup := &tele.ReplyMarkup{InlineKeyboard: btns}
	return c.Send(msgText, markup)
}

func (b *Bot) sendTikTokPayKeyboard(c tele.Context, url string) error {
	btns := [][]tele.InlineButton{
		{{Text: "–°–∫–∞—á–∞—Ç—å TikTok –∑–∞ 1 –∑–≤–µ–∑–¥—É", Data: "pay_tiktok|" + url}},
		{{Text: "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü –∑–∞ 30 –∑–≤—ë–∑–¥", Data: "pay_subscribe"}},
		{{Text: "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥ –∑–∞ 200 –∑–≤—ë–∑–¥", Data: "pay_subscribe_year"}},
		{{Text: "–ù–∞–≤—Å–µ–≥–¥–∞ –∑–∞ 1000 –∑–≤—ë–∑–¥", Data: "pay_subscribe_forever"}},
	}
	if b.channelUsername != "" {
		btns = append(btns, []tele.InlineButton{{Text: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", URL: "https://t.me/" + strings.TrimPrefix(b.channelUsername, "@")}})
	}
	msgText := "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
	if b.channelUsername != "" {
		msgText = fmt.Sprintf("–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ %s –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n%s", b.channelUsername, msgText)
	}
	markup := &tele.ReplyMarkup{InlineKeyboard: btns}
	return c.Send(msgText, markup)
}

func (b *Bot) handleCallback(c tele.Context) error {
	data := c.Callback().Data
	// chatID := c.Sender().ID // —É–¥–∞–ª–µ–Ω–æ –∫–∞–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ
	if data == "pay_subscribe" {
		return b.sendSubscribeInvoice(c, "month")
	}
	if data == "pay_subscribe_year" {
		return b.sendSubscribeInvoice(c, "year")
	}
	if data == "pay_subscribe_forever" {
		return b.sendSubscribeInvoice(c, "forever")
	}
	if strings.HasPrefix(data, "pay_video|") {
		url := strings.TrimPrefix(data, "pay_video|")
		return b.sendVideoInvoice(c, url)
	}
	if strings.HasPrefix(data, "pay_tiktok|") {
		url := strings.TrimPrefix(data, "pay_tiktok|")
		return b.sendTikTokInvoice(c, url)
	}
	// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
	if strings.HasPrefix(data, "admin_refund|") && b.adminID != "" && b.adminID == toStr(c.Sender().ID) {
		chargeID := strings.TrimPrefix(data, "admin_refund|")
		return b.handleAdminRefund(c, chargeID)
	}
	// --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ ---
	return nil
}

func (b *Bot) sendVideoInvoice(c tele.Context, url string) error {
	invoice := &tele.Invoice{
		Title:       "–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ",
		Description: "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å YouTube –∑–∞ 1 –∑–≤–µ–∑–¥—É",
		Payload:     "video|" + url,
		Currency:    "XTR",
		Prices:      []tele.Price{{Label: "–í–∏–¥–µ–æ", Amount: 100}},
	}
	_, err := b.api.Send(c.Sender(), invoice, b.providerToken)
	return err
}

func (b *Bot) sendTikTokInvoice(c tele.Context, url string) error {
	invoice := &tele.Invoice{
		Title:       "–°–∫–∞—á–∞—Ç—å TikTok –≤–∏–¥–µ–æ",
		Description: "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ TikTok –≤–∏–¥–µ–æ –∑–∞ 1 –∑–≤–µ–∑–¥—É",
		Payload:     "tiktok|" + url,
		Currency:    "XTR",
		Prices:      []tele.Price{{Label: "TikTok", Amount: 100}},
	}
	_, err := b.api.Send(c.Sender(), invoice, b.providerToken)
	return err
}

func (b *Bot) sendSubscribeInvoice(c tele.Context, period string) error {
	var price int
	var label, desc string
	switch period {
	case "month":
		price = 3000
		label = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü"
		desc = "–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∑–∞–≥—Ä—É–∑–∫–∞–º –Ω–∞ 1 –º–µ—Å—è—Ü"
	case "year":
		price = 20000
		label = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥"
		desc = "–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∑–∞–≥—Ä—É–∑–∫–∞–º –Ω–∞ 1 –≥–æ–¥"
	case "forever":
		price = 100000
		label = "–ù–∞–≤—Å–µ–≥–¥–∞"
		desc = "–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∑–∞–≥—Ä—É–∑–∫–∞–º"
	default:
		return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏")
	}
	invoice := &tele.Invoice{
		Title:       label,
		Description: desc,
		Payload:     "subscribe|" + period,
		Currency:    "XTR",
		Prices:      []tele.Price{{Label: label, Amount: price}},
	}
	_, err := b.api.Send(c.Sender(), invoice, b.providerToken)
	return err
}

func (b *Bot) handlePayment(c tele.Context) error {
	paymentInfo := c.Payment()
	if paymentInfo == nil {
		return nil
	}
	userID := c.Sender().ID
	payload := paymentInfo.Payload
	amount := paymentInfo.Total
	chargeID := paymentInfo.ProviderChargeID
	trx := &payment.Transaction{
		TelegramPaymentChargeID: chargeID,
		TelegramUserID:          userID,
		Amount:                  amount,
		InvoicePayload:          payload,
		Status:                  "success",
		Type:                    "stars",
		Reason:                  "",
	}
	b.transactionService.AddTransaction(trx)

	if strings.HasPrefix(payload, "video|") {
		url := strings.TrimPrefix(payload, "video|")
		go b.sendVideo(c, url, chargeID, amount)
		return c.Send("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å.")
	}
	if strings.HasPrefix(payload, "tiktok|") {
		url := strings.TrimPrefix(payload, "tiktok|")
		go b.sendTikTokVideo(c, url, chargeID, amount)
		return c.Send("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°–∫–∞—á–∏–≤–∞–Ω–∏–µ TikTok –Ω–∞—á–∞–ª–æ—Å—å.")
	}
	if strings.HasPrefix(payload, "subscribe|") {
		period := strings.TrimPrefix(payload, "subscribe|")
		// TODO: –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
		return c.Send("–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: " + period)
	}
	return c.Send("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
}

func (b *Bot) sendVideo(c tele.Context, url string, chargeID string, amount int) {
	c.Send("–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
	select {
	case b.downloadLimiter <- struct{}{}:
		defer func() { <-b.downloadLimiter }()
		filename, err := downloader.DownloadYouTubeVideo(url)
		if err != nil {
			c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: " + err.Error())
			payment.RefundStarPayment(c.Sender().ID, chargeID, amount, "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ")
			c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
			return
		}
		video := &tele.Video{File: tele.FromDisk(filename), Caption: "–í–∞—à–µ –≤–∏–¥–µ–æ!"}
		err = c.Send(video)
		if err != nil {
			if info, statErr := os.Stat(filename); statErr == nil {
				sizeMB := float64(info.Size()) / 1024.0 / 1024.0
				c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: %s\n–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: %.2f –ú–ë", err.Error(), sizeMB))
			} else {
				c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: " + err.Error())
			}
			payment.RefundStarPayment(c.Sender().ID, chargeID, amount, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ")
			c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
		}
		os.Remove(filename)
	default:
		c.Send("–°–µ–π—á–∞—Å –º–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")
	}
}

func (b *Bot) sendTikTokVideo(c tele.Context, url string, chargeID string, amount int) {
	c.Send("–°–∫–∞—á–∏–≤–∞—é TikTok –≤–∏–¥–µ–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
	select {
	case b.downloadLimiter <- struct{}{}:
		defer func() { <-b.downloadLimiter }()
		filename, err := downloader.DownloadTikTokVideo(url)
		if err != nil {
			c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ TikTok –≤–∏–¥–µ–æ: " + err.Error())
			payment.RefundStarPayment(c.Sender().ID, chargeID, amount, "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è TikTok –≤–∏–¥–µ–æ")
			c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
			return
		}
		video := &tele.Video{File: tele.FromDisk(filename), Caption: "–í–∞—à–µ TikTok –≤–∏–¥–µ–æ!"}
		err = c.Send(video)
		if err != nil {
			if info, statErr := os.Stat(filename); statErr == nil {
				sizeMB := float64(info.Size()) / 1024.0 / 1024.0
				c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: %s\n–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: %.2f –ú–ë", err.Error(), sizeMB))
			} else {
				c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: " + err.Error())
			}
			payment.RefundStarPayment(c.Sender().ID, chargeID, amount, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ TikTok –≤–∏–¥–µ–æ")
			c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
		}
		os.Remove(filename)
	default:
		c.Send("–°–µ–π—á–∞—Å –º–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")
	}
}

func (b *Bot) CheckUserSubscriptionRaw(channelUsername string, userID int64) (bool, error) {
	api := b.api
	chat, err := api.ChatByUsername(channelUsername)
	if err != nil {
		log.Printf("[SUB_CHECK] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞: %v", err)
		return false, err
	}
	member, err := api.ChatMemberOf(chat, &tele.User{ID: userID})
	if err != nil {
		log.Printf("[SUB_CHECK] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: %v", err)
		return false, err
	}
	log.Printf("[SUB_CHECK] –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", member.Role)
	if member.Role == tele.Member || member.Role == tele.Administrator || member.Role == tele.Creator {
		log.Printf("[SUB_CHECK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª")
		return true, nil
	}
	log.Printf("[SUB_CHECK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª")
	return false, nil
}

func (b *Bot) sendAdminTransactionsMenu(c tele.Context) error {
	transactions := b.transactionService.GetAllTransactions()
	if len(transactions) == 0 {
		return c.Send("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç.")
	}
	var btns [][]tele.InlineButton
	for _, trx := range transactions {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã–µ
		if trx.Status == "success" {
			caption := fmt.Sprintf("%s | %d XTR | %d", trx.InvoicePayload, trx.Amount, trx.TelegramUserID)
			btns = append(btns, []tele.InlineButton{{
				Text: caption,
				Data: "admin_refund|" + trx.TelegramPaymentChargeID,
			}})
		}
	}
	if len(btns) == 0 {
		return c.Send("–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
	}
	markup := &tele.ReplyMarkup{InlineKeyboard: btns}
	return c.Send("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞):", markup)
}

func (b *Bot) handleAdminRefund(c tele.Context, chargeID string) error {
	trxs := b.transactionService.GetAllTransactions()
	for _, trx := range trxs {
		if trx.TelegramPaymentChargeID == chargeID {
			// –î–µ–ª–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç –≤—Å–µ–≥–¥–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
			err := payment.RefundStarPayment(trx.TelegramUserID, trx.TelegramPaymentChargeID, trx.Amount, "–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞")
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: " + err.Error())
			}
			b.transactionService.MarkRefunded(chargeID)
			return c.Send("–í–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: " + chargeID)
		}
	}
	// –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é ‚Äî –ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Å –ø—É—Å—Ç—ã–º–∏ amount –∏ userID
	err := payment.RefundStarPayment(0, chargeID, 0, "–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞ (id –Ω–µ –Ω–∞–π–¥–µ–Ω)")
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: " + err.Error())
	}
	return c.Send("–ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: " + chargeID)
}

// –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–∫–∞–∑–∞—Ç—å user_id –≤—Ä—É—á–Ω—É—é
func (b *Bot) handleAdminRefundWithUserID(c tele.Context, chargeID string, userID int64) error {
	trxs := b.transactionService.GetAllTransactions()
	for _, trx := range trxs {
		if trx.TelegramPaymentChargeID == chargeID {
			if userID == 0 {
				userID = trx.TelegramUserID
			}
			err := payment.RefundStarPayment(userID, trx.TelegramPaymentChargeID, trx.Amount, "–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞")
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: " + err.Error())
			}
			b.transactionService.MarkRefunded(chargeID)
			return c.Send("–í–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: " + chargeID)
		}
	}
	if userID == 0 {
		return c.Send("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞ –∏ user_id –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
	}
	err := payment.RefundStarPayment(userID, chargeID, 0, "–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞ (user_id —É–∫–∞–∑–∞–Ω –≤—Ä—É—á–Ω—É—é)")
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: " + err.Error())
	}
	return c.Send("–ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: " + chargeID + " —Å user_id: " + strconv.FormatInt(userID, 10))
}

func toStr(id int64) string {
	return strconv.FormatInt(id, 10)
}
