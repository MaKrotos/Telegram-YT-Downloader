package bot

import (
	"log"
	"os"
	"regexp"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"YoutubeDownloader/internal/downloader"
	"YoutubeDownloader/internal/payment"
	"bytes"
	"database/sql"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os/exec"

	_ "github.com/lib/pq"
)

type Bot struct {
	api                *tgbotapi.BotAPI
	adminID            string
	providerToken      string
	transactionService *payment.TransactionService
	channelUsername    string        // username –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
	downloadLimiter    chan struct{} // —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
	db                 *sql.DB       // –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—ç—à–∞
}

func NewBot(token, adminID, providerToken string, db *sql.DB) (*Bot, error) {
	if providerToken == "" {
		providerToken = "XTR"
	}
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}
	channelUsername := os.Getenv("CHANNEL_USERNAME")
	maxWorkers := 3 // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	if mwStr := os.Getenv("MAX_DOWNLOAD_WORKERS"); mwStr != "" {
		if mw, err := strconv.Atoi(mwStr); err == nil && mw > 0 {
			maxWorkers = mw
		}
	}
	return &Bot{
		api:                api,
		adminID:            adminID,
		providerToken:      providerToken,
		transactionService: payment.NewTransactionService(),
		channelUsername:    channelUsername,
		downloadLimiter:    make(chan struct{}, maxWorkers),
		db:                 db,
	}, nil
}

func (b *Bot) Run() {
	b.api.Debug = true
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ: %s", b.api.Self.UserName)

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
	dbHost := os.Getenv("DB_HOST")
	dbPort := os.Getenv("DB_PORT")
	dbUser := os.Getenv("DB_USER")
	dbPass := os.Getenv("DB_PASSWORD")
	dbName := os.Getenv("DB_NAME")
	dsn := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=disable", dbHost, dbPort, dbUser, dbPass, dbName)
	db, err := sql.Open("postgres", dsn)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: %v", err)
	}
	defer db.Close()

	// –ú–∏–≥—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ goose
	cmd := exec.Command("goose", "-dir", "./migrations", "postgres", dsn, "up")
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	if err := cmd.Run(); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ goose: %v", err)
	}

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		b.handleUpdate(update)
	}
}

func (b *Bot) handleUpdate(update tgbotapi.Update) {
	if update.Message != nil {
		log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %s", update.Message.From.UserName, update.Message.Text)
		b.handleMessage(update.Message)
	}
	if update.Message != nil && update.Message.SuccessfulPayment != nil {
		b.handleSuccessfulPayment(update.Message)
	}
	if update.PreCheckoutQuery != nil {
		b.handlePreCheckout(update.PreCheckoutQuery)
	}
	if update.CallbackQuery != nil {
		b.handleCallback(update.CallbackQuery)
	}
}

func (b *Bot) handleMessage(msg *tgbotapi.Message) {
	if msg.Text == "/start" {
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, about –∏ –∞–≤–∞—Ç–∞—Ä–∫—É
		err := b.setupBotProfile()
		if err != nil {
			b.api.Send(tgbotapi.NewMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ñ–∏–ª—è –±–æ—Ç–∞: "+err.Error()))
		} else {
			b.api.Send(tgbotapi.NewMessage(msg.Chat.ID, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube –∑–∞ Telegram Stars. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube –∏–ª–∏ Shorts!"))
		}
		return
	}

	tiktokRegex := regexp.MustCompile(`(https?://)?(www\.)?(tiktok\.com|vm\.tiktok\.com)/[@\w\-?=&#./]+`)
	tiktokURL := tiktokRegex.FindString(msg.Text)
	if tiktokURL != "" {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
		if b.adminID != "" && b.adminID == toStr(msg.From.ID) {
			b.sendTikTokVideo(msg.Chat.ID, tiktokURL)
			return
		}
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
		if b.channelUsername != "" {
			isSub, err := b.CheckUserSubscriptionRaw(b.channelUsername, msg.From.ID)
			if err == nil && isSub {
				b.sendTikTokVideo(msg.Chat.ID, tiktokURL)
				return
			}
		}
		// –ö–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è TikTok
		var keyboardRows [][]tgbotapi.InlineKeyboardButton
		payRow1 := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–°–∫–∞—á–∞—Ç—å TikTok –∑–∞ 1 –∑–≤–µ–∑–¥—É", fmt.Sprintf("pay_tiktok|%s", tiktokURL)),
		)
		payRow2 := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü –∑–∞ 30 –∑–≤—ë–∑–¥", "pay_subscribe"),
		)
		payRow3 := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥ –∑–∞ 200 –∑–≤—ë–∑–¥", "pay_subscribe_year"),
		)
		payRow4 := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–≤—Å–µ–≥–¥–∞ –∑–∞ 1000 –∑–≤—ë–∑–¥", "pay_subscribe_forever"),
		)
		keyboardRows = append(keyboardRows, payRow1, payRow2, payRow3, payRow4)
		if b.channelUsername != "" {
			subscribeRow := tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonURL("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", fmt.Sprintf("https://t.me/%s", strings.TrimPrefix(b.channelUsername, "@"))),
			)
			keyboardRows = append(keyboardRows, subscribeRow)
		}
		msgText := "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
		if b.channelUsername != "" {
			msgText = fmt.Sprintf("–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ %s –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n%s", b.channelUsername, msgText)
		}
		msgConfig := tgbotapi.NewMessage(msg.Chat.ID, msgText)
		msgConfig.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboardRows...)
		b.api.Send(msgConfig)
		return
	}

	ytRegex := regexp.MustCompile(`(https?://)?(www\.)?(youtube\.com|youtu\.be)/[\w\-?=&#./]+`)
	url := ytRegex.FindString(msg.Text)
	if url == "" {
		b.api.Send(tgbotapi.NewMessage(msg.Chat.ID, "–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube –∏–ª–∏ TikTok."))
		return
	}
	isVideo := false
	if strings.Contains(url, "watch?v=") {
		isVideo = true
	}
	if strings.Contains(url, "/shorts/") {
		parts := strings.Split(url, "/shorts/")
		if len(parts) > 1 && len(parts[1]) >= 5 {
			isVideo = true
		}
	}
	// –ù–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Å—ã–ª–æ–∫ youtu.be
	if strings.Contains(url, "youtu.be/") {
		parts := strings.Split(url, "youtu.be/")
		if len(parts) > 1 && len(parts[1]) >= 5 {
			isVideo = true
		}
	}
	if !isVideo {
		b.api.Send(tgbotapi.NewMessage(msg.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤–∏–¥–µ–æ YouTube –∏–ª–∏ Shorts."))
		return
	}
	if b.adminID != "" && b.adminID == toStr(msg.From.ID) {
		b.sendVideo(msg.Chat.ID, url)
		return
	}
	// –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –∫–∞–Ω–∞–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	if b.channelUsername != "" {
		isSub, err := b.CheckUserSubscriptionRaw(b.channelUsername, msg.From.ID)
		if err == nil && isSub {
			b.sendVideo(msg.Chat.ID, url)
			return
		}
	}
	// –ö–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∏
	var keyboardRows [][]tgbotapi.InlineKeyboardButton
	// –ö–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã —Ç–µ–ø–µ—Ä—å –∫–∞–∂–¥–∞—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
	payRow1 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–°–∫–∞—á–∞—Ç—å –∑–∞ 1 –∑–≤–µ–∑–¥—É", fmt.Sprintf("pay_video|%s", url)),
	)
	payRow2 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü –∑–∞ 30 –∑–≤—ë–∑–¥", "pay_subscribe"),
	)
	payRow3 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥ –∑–∞ 200 –∑–≤—ë–∑–¥", "pay_subscribe_year"),
	)
	payRow4 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ù–∞–≤—Å–µ–≥–¥–∞ –∑–∞ 1000 –∑–≤—ë–∑–¥", "pay_subscribe_forever"),
	)
	keyboardRows = append(keyboardRows, payRow1, payRow2, payRow3, payRow4)
	if b.channelUsername != "" {
		// –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
		subscribeRow := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", fmt.Sprintf("https://t.me/%s", strings.TrimPrefix(b.channelUsername, "@"))),
		)
		keyboardRows = append(keyboardRows, subscribeRow)
	}
	msgText := "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
	if b.channelUsername != "" {
		msgText = fmt.Sprintf("–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ %s –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n%s", b.channelUsername, msgText)
	}
	msgConfig := tgbotapi.NewMessage(msg.Chat.ID, msgText)
	msgConfig.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboardRows...)
	b.api.Send(msgConfig)
}

func (b *Bot) handleSuccessfulPayment(msg *tgbotapi.Message) {
	log.Printf("–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞! telegram_payment_charge_id: %s", msg.SuccessfulPayment.TelegramPaymentChargeID)
	url := msg.SuccessfulPayment.InvoicePayload
	chatID := msg.Chat.ID
	userID := msg.From.ID
	b.api.Send(tgbotapi.NewMessage(chatID, "‚≠êÔ∏è –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç! –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ..."))
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏
	if strings.Contains(url, "tiktok.com") || strings.Contains(url, "vm.tiktok.com") {
		err := b.sendTikTokVideo(chatID, url)
		sp := msg.SuccessfulPayment
		if err != nil {
			log.Printf("[ERROR] –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è TikTok –≤–∏–¥–µ–æ: %v", err)
			errRefund := payment.RefundStarPayment(userID, sp.TelegramPaymentChargeID, sp.TotalAmount, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å TikTok –≤–∏–¥–µ–æ, –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤")
			if errRefund != nil {
				b.api.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å TikTok –≤–∏–¥–µ–æ –∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."))
			} else {
				b.api.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å TikTok –≤–∏–¥–µ–æ. –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã."))
			}
			return
		}
		trx := &payment.Transaction{
			TelegramPaymentChargeID: sp.TelegramPaymentChargeID,
			TelegramUserID:          userID,
			Amount:                  sp.TotalAmount,
			InvoicePayload:          sp.InvoicePayload,
			Status:                  "success",
			Type:                    "payment",
			Reason:                  "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars",
		}
		b.transactionService.AddTransaction(trx)
		return
	}
	// YouTube/Shorts
	err := b.sendVideo(chatID, url)
	sp := msg.SuccessfulPayment
	if err != nil {
		log.Printf("[ERROR] –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ: %v", err)
		errRefund := payment.RefundStarPayment(userID, sp.TelegramPaymentChargeID, sp.TotalAmount, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ, –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤")
		if errRefund != nil {
			b.api.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."))
		} else {
			b.api.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã."))
		}
		return
	}
	trx := &payment.Transaction{
		TelegramPaymentChargeID: sp.TelegramPaymentChargeID,
		TelegramUserID:          userID,
		Amount:                  sp.TotalAmount,
		InvoicePayload:          sp.InvoicePayload,
		Status:                  "success",
		Type:                    "payment",
		Reason:                  "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars",
	}
	b.transactionService.AddTransaction(trx)
}

func (b *Bot) handlePreCheckout(q *tgbotapi.PreCheckoutQuery) {
	preCheckoutConfig := tgbotapi.PreCheckoutConfig{
		PreCheckoutQueryID: q.ID,
		OK:                 true,
	}
	if _, err := b.api.Request(preCheckoutConfig); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è pre_checkout_query: %v", err)
	}
}

func (b *Bot) handleCallback(cb *tgbotapi.CallbackQuery) {
	data := cb.Data
	chatID := cb.Message.Chat.ID
	// userID := cb.From.ID // –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
	if data == "pay_subscribe" {
		err := b.sendStarsInvoice(chatID, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü", "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π", "subscribe", []map[string]interface{}{{"label": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü", "amount": 30}})
		if err != nil {
			b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—á—ë—Ç–∞: "+err.Error()))
		}
		b.api.Request(tgbotapi.NewCallback(cb.ID, "–í—ã—Å—Ç–∞–≤–ª–µ–Ω —Å—á—ë—Ç –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É"))
		return
	}
	if data == "pay_subscribe_year" {
		err := b.sendStarsInvoice(chatID, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥", "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 365 –¥–Ω–µ–π", "subscribe_year", []map[string]interface{}{{"label": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥", "amount": 200}})
		if err != nil {
			b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—á—ë—Ç–∞: "+err.Error()))
		}
		b.api.Request(tgbotapi.NewCallback(cb.ID, "–í—ã—Å—Ç–∞–≤–ª–µ–Ω —Å—á—ë—Ç –Ω–∞ –≥–æ–¥–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É"))
		return
	}
	if len(data) > 10 && data[:9] == "pay_video" {
		url := data[10:]
		err := b.sendStarsInvoice(chatID, "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ YouTube", "–û–ø–ª–∞—Ç–∞ 1 –∑–≤–µ–∑–¥–∞ –∑–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ", url, []map[string]interface{}{{"label": "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ", "amount": 1}})
		if err != nil {
			b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—á—ë—Ç–∞: "+err.Error()))
		}
		b.api.Request(tgbotapi.NewCallback(cb.ID, "–í—ã—Å—Ç–∞–≤–ª–µ–Ω —Å—á—ë—Ç –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ"))
		return
	}
	if len(data) > 12 && data[:10] == "pay_tiktok" {
		url := data[11:]
		err := b.sendStarsInvoice(chatID, "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ TikTok –≤–∏–¥–µ–æ", "–û–ø–ª–∞—Ç–∞ 1 –∑–≤–µ–∑–¥–∞ –∑–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ TikTok –≤–∏–¥–µ–æ", url, []map[string]interface{}{{"label": "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ TikTok", "amount": 1}})
		if err != nil {
			b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—á—ë—Ç–∞: "+err.Error()))
		}
		b.api.Request(tgbotapi.NewCallback(cb.ID, "–í—ã—Å—Ç–∞–≤–ª–µ–Ω —Å—á—ë—Ç –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ TikTok"))
		return
	}
	if data == "pay_subscribe_forever" {
		err := b.sendStarsInvoice(chatID, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–≤—Å–µ–≥–¥–∞", "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±–µ—Å—Å—Ä–æ—á–Ω–æ–π –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏", "subscribe_forever", []map[string]interface{}{{"label": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–≤—Å–µ–≥–¥–∞", "amount": 1000}})
		if err != nil {
			b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—á—ë—Ç–∞: "+err.Error()))
		}
		b.api.Request(tgbotapi.NewCallback(cb.ID, "–í—ã—Å—Ç–∞–≤–ª–µ–Ω —Å—á—ë—Ç –Ω–∞ –±–µ—Å—Å—Ä–æ—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É"))
		return
	}
}

func (b *Bot) sendVideo(chatID int64, url string) error {
	// –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º file_id –≤ –∫—ç—à–µ
	if fileID, err := b.getCachedFileID(url); err == nil && fileID != "" {
		videoFile := tgbotapi.NewVideo(chatID, tgbotapi.FileID(fileID))
		videoFile.Caption = "–í–∞—à–µ –≤–∏–¥–µ–æ! (–∏–∑ –∫—ç—à–∞)"
		_, err = b.api.Send(videoFile)
		return err // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–∑—É, –Ω–µ –∂–¥—ë–º downloadLimiter
	}

	msg := tgbotapi.NewMessage(chatID, "–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
	b.api.Send(msg)

	select {
	case b.downloadLimiter <- struct{}{}:
		go func() {
			defer func() { <-b.downloadLimiter }()
			filename, err := downloader.DownloadYouTubeVideo(url)
			if err != nil {
				b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: "+err.Error()))
				return
			}
			videoFile := tgbotapi.NewVideo(chatID, tgbotapi.FilePath(filename))
			videoFile.Caption = "–í–∞—à–µ –≤–∏–¥–µ–æ!"
			msgObj, err := b.api.Send(videoFile)
			if err == nil {
				if msgObj.Video != nil {
					b.saveCachedFileID(url, msgObj.Video.FileID)
				}
			}
			if err != nil {
				b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: "+err.Error()))
			}
			os.Remove(filename)
		}()
		return nil
	default:
		b.api.Send(tgbotapi.NewMessage(chatID, "–°–µ–π—á–∞—Å –º–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ."))
		return fmt.Errorf("–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫")
	}
}

func (b *Bot) sendTikTokVideo(chatID int64, url string) error {
	// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ TikTok –≤–∏–¥–µ–æ
	if fileID, err := b.getCachedFileID(url); err == nil && fileID != "" {
		videoFile := tgbotapi.NewVideo(chatID, tgbotapi.FileID(fileID))
		videoFile.Caption = "–í–∞—à–µ TikTok –≤–∏–¥–µ–æ! (–∏–∑ –∫—ç—à–∞)"
		_, err = b.api.Send(videoFile)
		return err
	}
	msg := tgbotapi.NewMessage(chatID, "–°–∫–∞—á–∏–≤–∞—é TikTok –≤–∏–¥–µ–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
	b.api.Send(msg)
	select {
	case b.downloadLimiter <- struct{}{}:
		go func() {
			defer func() { <-b.downloadLimiter }()
			filename, err := downloader.DownloadTikTokVideo(url)
			if err != nil {
				b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ TikTok –≤–∏–¥–µ–æ: "+err.Error()))
				return
			}
			videoFile := tgbotapi.NewVideo(chatID, tgbotapi.FilePath(filename))
			videoFile.Caption = "–í–∞—à–µ TikTok –≤–∏–¥–µ–æ!"
			msgObj, err := b.api.Send(videoFile)
			if err == nil {
				if msgObj.Video != nil {
					b.saveCachedFileID(url, msgObj.Video.FileID)
				}
			}
			if err != nil {
				b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: "+err.Error()))
			}
			os.Remove(filename)
		}()
		return nil
	default:
		b.api.Send(tgbotapi.NewMessage(chatID, "–°–µ–π—á–∞—Å –º–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ."))
		return fmt.Errorf("–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫")
	}
}

func (b *Bot) sendStarsInvoice(chatID int64, title, description, payload string, prices []map[string]interface{}) error {
	invoice := map[string]interface{}{
		"chat_id":               chatID,
		"title":                 title,
		"description":           description,
		"payload":               payload,
		"currency":              "XTR",
		"prices":                prices,
		"suggested_tip_amounts": []int{},
	}
	jsonData, err := json.Marshal(invoice)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ –∏–Ω–≤–æ–π—Å–∞: %w", err)
	}
	apiURL := fmt.Sprintf("https://api.telegram.org/bot%s/sendInvoice", b.api.Token)
	resp, err := http.Post(apiURL, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞: %w", err)
	}
	defer resp.Body.Close()
	bodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %w", err)
	}
	var result map[string]interface{}
	if err := json.Unmarshal(bodyBytes, &result); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %w", err)
	}
	if ok, exists := result["ok"].(bool); !exists || !ok {
		desc := result["description"]
		return fmt.Errorf("–æ—à–∏–±–∫–∞ Telegram API: %v", desc)
	}
	return nil
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ, about –∏ –∞–≤–∞—Ç–∞—Ä–∫—É –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Bot API
func (b *Bot) setupBotProfile() error {
	// 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ (description)
	descReq := tgbotapi.Params{
		"description": "–°–∫–∞—á–∏–≤–∞–π—Ç–µ –≤–∏–¥–µ–æ —Å YouTube –∑–∞ Telegram Stars!", // –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç
	}
	_, err := b.api.MakeRequest("setMyDescription", descReq)
	if err != nil {
		return fmt.Errorf("setMyDescription: %w", err)
	}

	// 2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å about (short description)
	aboutReq := tgbotapi.Params{
		"short_description": "YouTube ‚Üí Telegram –∑–∞ 1 –∑–≤–µ–∑–¥—É!", // –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç
	}
	_, err = b.api.MakeRequest("setMyShortDescription", aboutReq)
	if err != nil {
		return fmt.Errorf("setMyShortDescription: %w", err)
	}

	// 3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É (profile photo)
	// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
	return nil
}

// CheckUserSubscriptionRaw –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π HTTP-–∑–∞–ø—Ä–æ—Å –∫ Bot API
func (b *Bot) CheckUserSubscriptionRaw(channelUsername string, userID int64) (bool, error) {
	apiURL := fmt.Sprintf("https://api.telegram.org/bot%s/getChatMember", b.api.Token)
	// channelUsername –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "@yourchannel"
	data := map[string]interface{}{
		"chat_id": channelUsername,
		"user_id": userID,
	}
	jsonData, err := json.Marshal(data)
	if err != nil {
		return false, fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞: %w", err)
	}
	resp, err := http.Post(apiURL, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return false, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()
	bodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return false, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %w", err)
	}
	var result struct {
		Ok     bool `json:"ok"`
		Result struct {
			Status string `json:"status"`
		} `json:"result"`
		Description string `json:"description"`
	}
	if err := json.Unmarshal(bodyBytes, &result); err != nil {
		return false, fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %w", err)
	}
	if !result.Ok {
		return false, fmt.Errorf("–æ—à–∏–±–∫–∞ Telegram API: %v", result.Description)
	}
	if result.Result.Status == "member" || result.Result.Status == "administrator" || result.Result.Status == "creator" {
		return true, nil
	}
	return false, nil
}

func (b *Bot) getCachedFileID(url string) (string, error) {
	var fileID string
	err := b.db.QueryRow("SELECT telegram_file_id FROM video_cache WHERE url = $1", url).Scan(&fileID)
	if err != nil {
		return "", err
	}
	return fileID, nil
}

func (b *Bot) saveCachedFileID(url, fileID string) error {
	_, err := b.db.Exec("INSERT INTO video_cache (url, telegram_file_id) VALUES ($1, $2) ON CONFLICT (url) DO UPDATE SET telegram_file_id = EXCLUDED.telegram_file_id", url, fileID)
	return err
}

func toStr(id int64) string {
	return strconv.FormatInt(id, 10)
}
