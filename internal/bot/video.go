package bot

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strconv"
	"strings"
	"time"

	"YoutubeDownloader/internal/payment"
	"YoutubeDownloader/internal/storage"

	tele "gopkg.in/telebot.v4"
)

// sendUniversalPayKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –ø–ª–∞—Ç–µ–∂–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
func (b *Bot) sendUniversalPayKeyboard(c tele.Context, url string) error {
	logger := NewLogger("PAYMENT")

	// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –≤–∏–¥–µ–æ
	trx := &payment.Transaction{
		InvoicePayload:          "video|" + url,
		Amount:                  1, // 1 XTR
		TelegramUserID:          c.Sender().ID,
		Status:                  "pending",
		TelegramPaymentChargeID: "",
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ë–î
	id, err := SaveTransactionToDB(b.db, trx)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		return c.Send("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	markup := &tele.ReplyMarkup{InlineKeyboard: [][]tele.InlineButton{
		{
			{
				Text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 1 ‚≠ê",
				Data: CallbackPayVideo + "|" + strconv.FormatInt(id, 10),
			},
		},
	}}

	logger.Info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è URL: %s", url)
	return c.Send("üé¨ –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å 1 ‚≠ê", markup)
}

// sendPaymentKeyboardWithSubscriptions –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–ª–∞—Ç–µ–∂–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
func (b *Bot) sendPaymentKeyboardWithSubscriptions(c tele.Context, url string) error {
	logger := NewLogger("PAYMENT")

	// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –≤–∏–¥–µ–æ
	trx := &payment.Transaction{
		InvoicePayload:          "video|" + url,
		Amount:                  1, // 1 XTR
		TelegramUserID:          c.Sender().ID,
		Status:                  "pending",
		TelegramPaymentChargeID: "",
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ë–î
	id, err := SaveTransactionToDB(b.db, trx)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		return c.Send("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
	markup := &tele.ReplyMarkup{InlineKeyboard: [][]tele.InlineButton{
		{
			{
				Text: "üì¢ –ü–û–î–ü–ò–°–ê–¢–¨–°–Ø –ù–ê –ö–ê–ù–ê–õ (–ë–ï–°–ü–õ–ê–¢–ù–û)",
				Data: "subscribe_channel",
			},
		},
		{
			{
				Text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 1 ‚≠ê –∑–∞ –≤–∏–¥–µ–æ",
				Data: CallbackPayVideo + "|" + strconv.FormatInt(id, 10),
			},
		},
		{
			{
				Text: "üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü (5 ‚≠ê)",
				Data: CallbackPaySubscribe,
			},
		},
		{
			{
				Text: "üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥ (50 ‚≠ê)",
				Data: CallbackPaySubscribeYear,
			},
		},
		{
			{
				Text: "‚ôæÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–≤—Å–µ–≥–¥–∞ (100 ‚≠ê)",
				Data: CallbackPaySubscribeForever,
			},
		},
	}}

	message := `üé¨ –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:

üì¢ –ü–û–î–ü–ò–°–ê–¢–¨–°–Ø –ù–ê –ö–ê–ù–ê–õ - –ë–ï–°–ü–õ–ê–¢–ù–û! 
   ‚¨ÜÔ∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ‚¨ÜÔ∏è

üí≥ –†–∞–∑–æ–≤–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ - 1 ‚≠ê
üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü - 5 ‚≠ê (–±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è)
üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥ - 50 ‚≠ê (–±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è)
‚ôæÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–≤—Å–µ–≥–¥–∞ - 100 ‚≠ê (–±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è)

üí° –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ —Å–∫–∞—á–∏–≤–∞—é—Ç –í–°–ï –≤–∏–¥–µ–æ –ë–ï–°–ü–õ–ê–¢–ù–û!`

	logger.Info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –¥–ª—è URL: %s", url)
	return c.Send(message, markup)
}

// sendVideoInvoiceByDB –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–≤–æ–π—Å –¥–ª—è –≤–∏–¥–µ–æ –∏–∑ –ë–î
func (b *Bot) sendVideoInvoiceByDB(c tele.Context, trx *payment.Transaction) error {
	logger := NewLogger("INVOICE")

	invoice := &tele.Invoice{
		Title:       "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ",
		Description: "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å YouTube –∏ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º",
		Payload:     trx.InvoicePayload,
		Currency:    "XTR",
		Prices:      []tele.Price{{Label: "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ ‚≠ê", Amount: trx.Amount}},
	}

	logger.Info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –≤–∏–¥–µ–æ: %s", trx.InvoicePayload)

	// –î–ª—è Telegram Stars –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ provider token
	_, err := b.api.Send(c.Sender(), invoice)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞: %v", err)
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞: %v", err))
	}

	return nil
}

// sendSubscribeInvoice –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
func (b *Bot) sendSubscribeInvoice(c tele.Context, period string) error {
	logger := NewLogger("SUBSCRIBE")

	var title, description string
	var amount int

	switch period {
	case "month":
		title = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü"
		description = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü - –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
		amount = 5
	case "year":
		title = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥"
		description = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥ - –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
		amount = 50
	case "forever":
		title = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–≤—Å–µ–≥–¥–∞"
		description = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–≤—Å–µ–≥–¥–∞ - –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
		amount = 100
	default:
		return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏")
	}

	invoice := &tele.Invoice{
		Title:       title,
		Description: description,
		Payload:     "subscribe|" + period,
		Currency:    "XTR",
		Prices:      []tele.Price{{Label: title + " ‚≠ê", Amount: amount}},
	}

	logger.Info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: %s (%d XTR)", period, amount)

	// –î–ª—è Telegram Stars –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ provider token
	_, err := b.api.Send(c.Sender(), invoice)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞: %v", err))
	}

	return nil
}

// sendVideoWithRetry –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
func (b *Bot) sendVideoWithRetry(c tele.Context, video *tele.Video, url string, maxRetries int) error {
	logger := NewLogger("VIDEO_SEND")

	for i := 0; i < maxRetries; i++ {
		err := c.Send(video)
		if err == nil {
			logger.Info("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –ø–æ–ø—ã—Ç–∫–∏ %d", i+1)
			return nil
		}

		logger.Warning("–ü–æ–ø—ã—Ç–∫–∞ %d –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –Ω–µ —É–¥–∞–ª–∞—Å—å: %v", i+1, err)
		if i < maxRetries-1 {
			time.Sleep(time.Second * time.Duration(i+1))
		}
	}

	logger.Error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –Ω–µ —É–¥–∞–ª–∏—Å—å")
	return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫", maxRetries)
}

// sendVideo –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ
func (b *Bot) sendVideo(c tele.Context, url string, chargeID string, amount int) {
	logger := NewLogger("VIDEO")
	startTime := time.Now()

	logger.Info("–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: %s", url)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ –≤–∏–¥–µ–æ
	if b.downloadManager.IsDownloadActive(url) {
		logger.Info("–í–∏–¥–µ–æ —É–∂–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è, –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
		c.Send("‚è≥ –í–∏–¥–µ–æ —É–∂–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è, –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
		downloadInfo, err := b.downloadManager.WaitForDownload(url, b.config.DownloadTimeout)
		if err != nil {
			logger.Error("–û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: %v", err)
			c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.")
			return
		}
		if downloadInfo != nil && downloadInfo.Error != nil {
			logger.Error("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π: %v", downloadInfo.Error)
			c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ.")
			return
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
	if !b.downloadManager.AcquireDownloadSlot() {
		logger.Warning("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
		c.Send("–°–µ–π—á–∞—Å –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}
	defer b.downloadManager.ReleaseDownloadSlot()

	// –ü–æ–ª—É—á–∞–µ–º –º—å—é—Ç–µ–∫—Å –¥–ª—è URL
	mutex := b.downloadManager.GetURLMutex(url)
	mutex.Lock()
	defer func() {
		mutex.Unlock()
		b.downloadManager.CleanupURLMutex(url)
	}()

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
	requestID := GenerateRequestID()
	_ = b.downloadManager.StartDownload(url, requestID, c.Sender().ID)
	defer b.downloadManager.FinishDownload(url, nil)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
	logger.Info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è URL: %s", url)
	cachedVideo, err := GetCachedVideo(b.db, url)
	if err != nil {
		logger.Warning("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞: %v", err)
	} else if cachedVideo != nil {
		// –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤–∏–¥–µ–æ
		if cached, ok := cachedVideo.(*CachedVideo); ok {
			logger.Info("–ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –≤ –∫—ç—à–µ —Å file_id: %s", cached.FilePath)

			// –î–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º file_id –æ—Ç Telegram
			video := &tele.Video{
				File: tele.File{FileID: cached.FilePath}, // –ò—Å–ø–æ–ª—å–∑—É–µ–º FileID –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é
			logger.Info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ —Å file_id: %s", cached.FilePath)
			_, err := b.api.Send(c.Sender(), video)
			if err != nil {
				logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ: %v", err)
				// –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ file_id –Ω–µ —É–¥–∞–ª–∞—Å—å, —É–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞ –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
				logger.Info("–£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –∏–∑ –∫—ç—à–∞")
				storage.DeleteVideoFromCache(b.db, url)
				// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
			} else {
				logger.Info("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
				logger.LogPerformance("–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ", startTime)
				return
			}
		}
	}

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –≤ –∫—ç—à–µ)
	c.Send("‚è≥ –í–∏–¥–µ–æ –∫–∞—á–∞–µ—Ç—Å—è...")

	// –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
	logger.Info("–°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ: %s", url)
	videoPath, err := DownloadVideo(url)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ: %v", err)
		b.downloadManager.FinishDownload(url, err)
		c.Send("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
	videoInfo, err := GetVideoInfo(videoPath)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: %v", err)
		b.downloadManager.FinishDownload(url, err)
		c.Send("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ.")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
	if _, ok := videoInfo.(*VideoInfo); ok {
		video := &tele.Video{
			File: tele.FromDisk(videoPath),
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_id
		sentMessage, err := b.api.Send(c.Sender(), video)
		if err != nil {
			logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: %v", err)
			b.downloadManager.FinishDownload(url, err)
			c.Send("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ.")
			return
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ –∫—ç—à, –µ—Å–ª–∏ –≤–∏–¥–µ–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
		if sentMessage != nil && sentMessage.Video != nil && sentMessage.Video.FileID != "" {
			logger.Info("–°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ –∫—ç—à: %s –¥–ª—è URL: %s", sentMessage.Video.FileID, url)
			err = SaveVideoToCache(b.db, url, sentMessage.Video.FileID)
			if err != nil {
				logger.Warning("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è file_id –≤ –∫—ç—à: %v", err)
			} else {
				logger.Info("File_id —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à")
			}
		} else {
			logger.Warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å file_id –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à")
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
		if chargeID != "" {
			err = UpdateTransactionStatus(b.db, chargeID, "completed")
			if err != nil {
				logger.Error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
			}
		}

		logger.LogPerformance("–ü–æ–ª–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ", startTime)
	}
}

// CheckUserSubscriptionRaw –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ Telegram API
func (b *Bot) CheckUserSubscriptionRaw(channelUsername string, userID int64) (bool, error) {
	// channelUsername –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "@yourchannel" –∏–ª–∏ chat_id
	apiURL := fmt.Sprintf("https://api.telegram.org/bot%s/getChatMember", b.api.Token)

	// –ï—Å–ª–∏ –Ω–µ—Ç @, –¥–æ–±–∞–≤–∏–º
	if !strings.HasPrefix(channelUsername, "@") && !strings.HasPrefix(channelUsername, "-") {
		channelUsername = "@" + channelUsername
	}

	data := map[string]interface{}{
		"chat_id": channelUsername,
		"user_id": userID,
	}
	jsonData, err := json.Marshal(data)
	if err != nil {
		return false, fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞: %w", err)
	}
	resp, err := http.Post(apiURL, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return false, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()
	bodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return false, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %w", err)
	}
	var result struct {
		Ok     bool `json:"ok"`
		Result struct {
			Status string `json:"status"`
		} `json:"result"`
		Description string `json:"description"`
	}
	if err := json.Unmarshal(bodyBytes, &result); err != nil {
		return false, fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %w", err)
	}
	if !result.Ok {
		return false, fmt.Errorf("–æ—à–∏–±–∫–∞ Telegram API: %v", result.Description)
	}
	if result.Result.Status == "member" || result.Result.Status == "administrator" || result.Result.Status == "creator" {
		return true, nil
	}
	return false, nil
}

// sendError –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
func (b *Bot) sendError(c tele.Context, userMsg string, err error, extraInfo ...string) {
	logger := NewLogger("ERROR")

	info := ""
	if len(extraInfo) > 0 {
		info = extraInfo[0]
	}
	logger.LogErrorWithContext(userMsg, err, info)

	c.Send(userMsg)
}
